{"version":2,"kind":"Notebook","sha256":"f9e50793f7d3cb568eabd3d42a2aa3c97ec012b74e54c395391d93966f732b0e","slug":"notebooks.era5-data-access","location":"/notebooks/era5_data_access.ipynb","dependencies":[],"frontmatter":{"title":"ERA5","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"default","language":"python"},"authors":[{"nameParsed":{"literal":"The SnowPit Community","given":"The SnowPit","family":"Community"},"name":"The SnowPit Community","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/SnowEx/snow-cookbook","copyright":"2025","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"numbering":{"title":{"offset":1}},"source_url":"https://github.com/SnowEx/snow-cookbook/blob/main/notebooks/era5_data_access.ipynb","edit_url":"https://github.com/SnowEx/snow-cookbook/edit/main/notebooks/era5_data_access.ipynb","exports":[{"format":"ipynb","filename":"era5_data_access.ipynb","url":"/snow-cookbook/build/era5_data_access-03a5a8f7713be9293871b4df70ae32d6.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"This is a script designed to obtain snow data from the ERA5 reanalysis product. We will be using the Copernicus API to get global, daily snow cover and snow depth information.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"WJnN8PeywT"}],"key":"dkC7jU0r1n"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"This code is adapted from Tasha Snow’s ERA5 downloading script: ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"kf6T0KcCex"},{"type":"link","url":"https://github.com/tsnow03/Landsat_SST_algorithm/blob/main/ERADownload.ipynb","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"ERADownload.ipynb","key":"oVCjYaa22i"}],"urlSource":"https://github.com/tsnow03/Landsat_SST_algorithm/blob/main/ERADownload.ipynb","data":{"kind":"file","org":"tsnow03","repo":"Landsat_SST_algorithm","reference":"main","file":"ERADownload.ipynb","raw":"https://raw.githubusercontent.com/tsnow03/Landsat_SST_algorithm/main/ERADownload.ipynb"},"internal":false,"protocol":"github","key":"L49tv2tBBj"}],"key":"xtPgBrnZI1"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"The Copernicus Climate Data Store (CDS) API is not on CryoCloud by default, so the following cell needs to be run, followed by restarting the kernel.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"ks3VaZP50w"}],"key":"wrM1mx6Dq4"}],"key":"yaItnGJ98y"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"To use the CDS API, the user needs credentials to the Copernicus Climate Data Store (CDS). Upon getting a user ID (","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xvMZLboFuN"},{"type":"inlineCode","value":"uid","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xdpl5iSXG2"},{"type":"text","value":") and an API key (","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"W7AyUD4d31"},{"type":"inlineCode","value":"api-key","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"tsygqGS9Ak"},{"type":"text","value":"), they need to run the following cell (skip if you already have ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"njwGSNymuq"},{"type":"inlineCode","value":"./cdsapirc","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"KXjIiSusCV"},{"type":"text","value":" in the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"dIyfA66c9P"},{"type":"inlineCode","value":"/home/jovyan/","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"cr0s3jCW4n"},{"type":"text","value":" directory).","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"iA8aOR7qWo"}],"key":"UaH6f7YSxd"}],"key":"avC1tbs8ww"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# !echo url: https://cds.climate.copernicus.eu/api/v2 >> /home/jovyan/.cdsapirc\n# !echo key: {uid}:{api-key} >> /home/jovyan/.cdsapirc","key":"VCj5XXscLE"},{"type":"output","id":"o1Jyo4AylFMiOKgM94DrT","data":[],"key":"CDAqGOxWHM"}],"key":"cpuYj2lH5k"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from ecmwfapi import ECMWFDataServer # Need a ecmwf user name and password first\nimport cdsapi","key":"lXFQ15Xti9"},{"type":"output","id":"60uV3w5FsqhTdRQfJ1WQ-","data":[{"output_type":"error","traceback":"\u001b[31m---------------------------------------------------------------------------\u001b[39m\n\u001b[31mModuleNotFoundError\u001b[39m                       Traceback (most recent call last)\n\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[2]\u001b[39m\u001b[32m, line 1\u001b[39m\n\u001b[32m----> \u001b[39m\u001b[32m1\u001b[39m \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mecmwfapi\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mimport\u001b[39;00m ECMWFDataServer \u001b[38;5;66;03m# Need a ecmwf user name and password first\u001b[39;00m\n\u001b[32m      2\u001b[39m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mcdsapi\u001b[39;00m\n\n\u001b[31mModuleNotFoundError\u001b[39m: No module named 'ecmwfapi'","ename":"ModuleNotFoundError","evalue":"No module named 'ecmwfapi'"}],"key":"WOUssdJuuF"}],"key":"SJZUiBFTiK"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The CDS API can be a bit picky with inputs from ERA5, so first-time users are encouraged to use the online request form (","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"VYFjOwhGJB"},{"type":"link","url":"https://cds.climate.copernicus.eu/datasets/reanalysis-era5-single-levels?tab=download","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"https://​cds​.climate​.copernicus​.eu​/datasets​/reanalysis​-era5​-single​-levels​?tab​=​download","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"GY49lr7xhC"}],"urlSource":"https://cds.climate.copernicus.eu/datasets/reanalysis-era5-single-levels?tab=download","key":"NA1UNhfPBX"},{"type":"text","value":") to automatically generate a code for their API request, to ensure that the syntax is correct.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"marOSTd618"}],"key":"cPPtoWJZZZ"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"The below functions retrieve ERA5 snow depth and snow density and download them to a ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"UtYJamaxNy"},{"type":"inlineCode","value":"tmp/","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"qvht0fVEpq"},{"type":"text","value":" folder. Additional parameters to consider:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"dGx2aAREM9"}],"key":"z9mu4476kZ"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":4,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"yearStart","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"Ob06jU7ZwX"},{"type":"text","value":" and ","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"SmxUx971PC"},{"type":"inlineCode","value":"yearEnd","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"BoWJzC7RuM"},{"type":"text","value":": Start and end year.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"bf2Gwf4gyB"}],"key":"ypHjVqr7co"}],"key":"PDX0HD1GQH"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"monthStart","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"CDoNrwkHdO"},{"type":"text","value":" and ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"Y2bXsXeRVl"},{"type":"inlineCode","value":"monthEnd","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"KlP8C0ewJI"},{"type":"text","value":": Start and end month.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"FHkAxiQvOB"}],"key":"TwExnKAXkx"}],"key":"lzczfZNzVC"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"dayStart","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"WOqK9vgNig"},{"type":"text","value":" and ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"OYyEgt1GnD"},{"type":"inlineCode","value":"dayEnd","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"pNcwbwrtZ3"},{"type":"text","value":": Start and end day.","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"S9RKBq9jMt"}],"key":"QicrbIOJXS"}],"key":"v3iYhC1Zyo"}],"key":"wdoLhT3JjX"},{"type":"paragraph","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"The function currently grabs daily data from March 1, 2020 - April 30, 2020 at 12:00 UTC each day, and downloads as daily netCDF files. Because ERA5 is generated hourly, users can expand the ","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"hNs1Jl2mo5"},{"type":"inlineCode","value":"time","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"CrqOrp5h2n"},{"type":"text","value":" entry to include more hours per day.","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"bILMet5MyH"}],"key":"pD8iiP3D86"}],"key":"TfuXwpydzw"},{"type":"block","kind":"notebook-code","data":{"scrolled":true},"children":[{"type":"code","lang":"python","executable":true,"value":"from pathlib import Path\n\n# Initialize the CDS API\nc = cdsapi.Client()\n\ndef retrieve_era5():\n    \"\"\"      \n       A function to demonstrate how to iterate efficiently over several years and months etc    \n       for a particular ERA5 request.\n    \"\"\"\n    yearStart = 2020\n    yearEnd = 2020\n    monthStart = 3\n    monthEnd = 3\n    dayStart = 1\n    dayEnd = 31\n    for year in list(range(yearStart, yearEnd + 1)):\n        for month in list(range(monthStart, monthEnd + 1)):\n            for day in list(range(dayStart, dayEnd + 1)):\n                startDy = '%02d' % (day)\n                startMo = '%02d' % (month)\n                startYr = '%04d' % (year)\n                tmp_dir = Path.cwd() / \"tmp\"\n                tmp_dir.mkdir(exist_ok=True)\n                target = f\"{tmp_dir}/era5_SWE_{startYr}{startMo}{startDy}.nc\"\n                era5_request(startYr, startMo, startDy, target)\n\ndef era5_request(startYr, startMo, startDy, target):\n    \"\"\"      \n        Helper function for era5_retrieve. An ERA-5 request for snow\n        depth and snow cover data for the given years/months/days.\n\n        Inputs\n        ------------\n        startYr: str\n            Starting year of data query, in YYYY format.\n        startMo: str\n            Starting month of data query, in MM format.\n        startDy: str\n            Starting day of data query, in DD format.\n        target: str\n            Path and name of netCDF file to be saved.\n    \"\"\"\n    c.retrieve(\n    'reanalysis-era5-land',\n    {\n        'product_type':['reanalysis'],\n        'data_format':'netcdf',\n        'variable':['snow_depth', 'snow_cover'],\n        'year':[startYr],\n        'month':[startMo],\n        'day':[startDy],\n        'time':['12:00']\n    },\n    target)\n        \nif __name__ == '__main__':\n    retrieve_era5()","key":"jwcpetUdp6"},{"type":"output","id":"YLw6VrFwhvbc6nF4WKr3M","data":[],"key":"NPDOJcavcM"}],"key":"G6UcU5EXdD"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Depending on the number of files downloaded (31 in the case of the above example), it can take a while to download everything.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"P3k73jS1ga"}],"key":"BLOEPy9ewo"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"When it finishes, there should now be daily ERA5 data in netCDF format! To efficiently load all of this data, we are going to use Xarray and its ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"vP3B9V5xog"},{"type":"inlineCode","value":"open_mfdataset()","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"DRxmXtNUvP"},{"type":"text","value":" function.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Jnf5jxDfO0"}],"key":"tHjmBwfCPS"}],"key":"DEGUdOcz8y"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import os\nimport re\nimport zipfile\nimport xarray as xr\n\nfrom os import listdir\nfrom os.path import join","key":"jLPWzIQuPp"},{"type":"output","id":"7DFDpKw8tqWvknAJxp2qP","data":[],"key":"j92d9WD5Vw"}],"key":"giHKiskuwF"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def process_era5_data(tmp_path):\n    # Find ERA5 Zip files in downloaded directory\n    era5_files = [join(tmp_path,f) for f in listdir(tmp_path) if \"era5_\" in join(tmp_path, f)]\n    \n    # Iteratively unzip each file and collect into a list\n    tmp_files = era5_extract(era5_files, tmp_dir)\n\n    print('------------')\n    # Open all ERA5 files into single Xarray\n    ds = xr.open_mfdataset(tmp_files)\n    print(\"All data has been lazy-loaded into Xarray.\")\n\n    # Remove extracted files, for cleanliness\n    for file in tmp_files:\n        os.remove(file)\n    print(\"Extracted ERA-5 files deleted.\")\n\n    return ds\n\ndef era5_extract(era5_files, tmp_dir):\n    for file in era5_files:\n        with zipfile.ZipFile(file, 'r') as zfile:\n            print(f'Now extracting data for file: {file}')\n            # Extract all files from current Zip file\n            zfile.extractall(tmp_dir)\n\n            # Rename output file to prevent overwriting\n            outfile = join(tmp_dir, \"data_0.nc\")\n            date_pattern = re.search(r'\\d{8}', file).group(0)\n            newfile = join(tmp_dir, f'data_{date_pattern}.nc')\n            os.rename(outfile, newfile)\n            print(f'Data extracted and saved to file: data_{date_pattern}.nc')\n            print(' ')\n\n    # List of output files\n    tmp_files = [join(tmp_dir,f) for f in os.listdir(tmp_dir) if \"data_\" in join(tmp_dir, f)]\n\n    return tmp_files","key":"ZlOvXZqJb0"},{"type":"output","id":"-L51fiUDAbGCuIDMEbWTM","data":[],"key":"keN5azQOm2"}],"key":"A5TZMABnjb"},{"type":"block","kind":"notebook-code","data":{"scrolled":true},"children":[{"type":"code","lang":"python","executable":true,"value":"tmp_dir = Path.cwd() / \"tmp\"\nds = process_era5_data(tmp_dir)","key":"YAZf3m5dpp"},{"type":"output","id":"Qp6Y75ODO3OOKjM_hdMVg","data":[],"key":"Vx31MvurHF"}],"key":"IJtYjaqyn1"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ds","key":"pVs61eqVIB"},{"type":"output","id":"bwtjTBfj-IOZIfAs-3sse","data":[],"key":"OohdMKAMYg"}],"key":"XPYs7LKkJt"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Thanks to the above function, loading all of that data is pretty easy! However, it is important to note that the data is currently “lazy-loaded” - we can easily subset and resample the data for our needs, but we will need to load it into memory if we wish to make figures.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"oayIx0aukM"}],"key":"CLvWQuhTsE"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Fully loading the data as is can be time-consuming, so let’s reduce the data first, starting with making monthly means of snow depth.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"feJx4ZzaOZ"}],"key":"RhG8jVuvcg"}],"key":"S9R7nCSoam"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Calculate monthly mean snow depth and snow cover\nera5_monthly = ds.resample(valid_time='1ME').mean()","key":"MuKUq3w7ag"},{"type":"output","id":"_jzffOjcsGzJpri4rFHVB","data":[],"key":"FP164iiaoP"}],"key":"kPuEasenNA"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Resampling to monthly means reduces the data volume by quite a bit, so let’s now look at global snow depth from the month of March. We will go ahead and load the result into memory using the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"UmbDpZf5dm"},{"type":"inlineCode","value":"compute()","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"n1JZtCap1S"},{"type":"text","value":" function.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"mP7jXMbSKk"}],"key":"f8bPCssE3K"}],"key":"mP9lLFy48j"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Load March snow depths into memory\nera5_sd_march = era5_monthly['snowc'].compute().squeeze()","key":"w4vnOqAKdJ"},{"type":"output","id":"ShSts8coGTd2b6Zvplo9z","data":[],"key":"MKvudIIT7O"}],"key":"wMFEZJI0p5"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Finally, we can make a map figure showing global, monthly-averaged snow depth from ERA5.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"nw9Ka3xl6k"}],"key":"baIbbGHAGZ"}],"key":"sMxpdWQ3TN"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\nera5_sd_march.plot.imshow(ax=ax, cmap='Blues')\nax.set_xlabel(\"Longitude\", fontsize=12)\nax.set_ylabel(\"Latitude\", fontsize=12)\nax.set_title(\"ERA5 Snow Cover, March 2020\", fontsize=12)\nfig.tight_layout()","key":"gbEQKXZA1w"},{"type":"output","id":"80EJV9bRuo3uDLkAXwSBB","data":[],"key":"YqF8UxfE6S"}],"key":"Sm6itrRY9W"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now for a different example. Here, we will examine snow depths over Alaska only, and generate a state-wide time series for the month of March.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ClIbmhqJ2g"}],"key":"fXkeDPJIyH"}],"key":"UWAkXIhyns"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Making bounds for Alaska\nmask_lon = (ds.longitude >= -168.75+360) & (ds.longitude <= -136.01+360)\nmask_lat = (ds.latitude >= 52.64) & (ds.latitude <= 71.59)\n\n# Subset ERA5 data to Alaska lats/lons only\nera5_alaska = ds.where(mask_lon & mask_lat, drop=True)","key":"bosfSrleVN"},{"type":"output","id":"wUsd7R4Ir9LWst1BbAntN","data":[],"key":"tkFqjVqojQ"}],"key":"DD4NdFeXd8"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"As before, we need to load the Alaska data into memory. Because we are looking over a much smaller spatial domain, ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"rYu683POvr"},{"type":"inlineCode","value":"compute()","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"bDPeC746Hv"},{"type":"text","value":" will be much faster.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xBgCMEeWMW"}],"key":"eqy1lKJbAQ"}],"key":"A0nnU9oYy0"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Load Alaska data into memory\nera5_alaska = era5_alaska.compute().squeeze()","key":"zVI77kyfCD"},{"type":"output","id":"-hzvsoh7cdnt-r-BBFLDX","data":[],"key":"ClxRf6nAqj"}],"key":"CfnO9LMQr1"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Again, we can make a map figure showing snow depth over the state of Alaska, this time for March 1, 2020:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"U7WTm3lWRa"}],"key":"ZUMQUngvnV"}],"key":"um9ixKFv8k"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Map plot of Alaska snow depths\nera5_alaska['snowc'].isel(valid_time=0).plot.imshow(vmin=0, vmax=1, cmap=\"Blues\")","key":"aC7BfEq8rw"},{"type":"output","id":"dp69I3Jhnn2WC4KRzK2rH","data":[],"key":"T19Nie6Oma"}],"key":"inmNHVK46Z"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"We can also create a spatially-averaged time series of snow depth over the state of Alaska for the entire time period March 1 - April 30:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"FH4MkLELfl"}],"key":"TolsyKBGD7"}],"key":"DLGtorHl1P"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Calculate spatial average of snow depths over Alaska\nera5_sd_alaska = era5_alaska['snowc'].mean(('longitude', 'latitude'))","key":"WMYCtHDPbD"},{"type":"output","id":"wwgconufM7J8LKywqqe_T","data":[],"key":"ADEd1SyNQv"}],"key":"gYOwN8j0s7"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Time series plot of Alaska snow depths\nfig, ax = plt.subplots()\nera5_sd_alaska.plot(ax=ax)\nax.set_xlabel(\"Day\", fontsize=12)\nax.set_ylabel(\"Snow depth [m]\", fontsize=12)\nax.set_title(\"March 1 - April 30, 2020\", fontsize=12)\nfig.tight_layout()","key":"tFabE7MH8j"},{"type":"output","id":"HwzZi0qGPCcgv4eXVVyOY","data":[],"key":"HEhXISciai"}],"key":"LVJo5gTlCx"}],"key":"nz6fMsjtEf"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"MERRA-2","url":"/notebooks/merra2-data-access","group":"Analysis and Machine Learning"}}},"domain":"http://localhost:3000"}