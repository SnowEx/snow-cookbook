{"version":2,"kind":"Notebook","sha256":"faa754e0dd2dfda3173f9dbdcdd44a4b9529a0ebd56dae55bbe2eb58cb611a22","slug":"notebooks.snowmodeling-tutorial-pt1","location":"/notebooks/snowmodeling_tutorial_pt1.ipynb","dependencies":[],"frontmatter":{"title":"Snow Modeling","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"The SnowPit Community","given":"The SnowPit","family":"Community"},"name":"The SnowPit Community","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/SnowEx/snow-cookbook","copyright":"2025","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"numbering":{"title":{"offset":1}},"edit_url":"https://github.com/SnowEx/snow-cookbook/blob/HEAD/notebooks/snowmodeling_tutorial_pt1.ipynb","exports":[{"format":"ipynb","filename":"snowmodeling_tutorial_pt1.ipynb","url":"/snow-cookbook/_preview/7/build/snowmodeling_tutoria-2ae3b17d85111a0824ade5799922057a.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Contributors:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Eug50AQgsi"}],"key":"lzS1CDx4k6"},{"type":"text","value":" ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"T4NtUTePl5"},{"type":"emphasis","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Melissa Wrzesien","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Z01s4yhzv2"},{"type":"superscript","children":[{"type":"text","value":"1,2","key":"H7DNhusIq7"}],"key":"DdcuzGVI66"},{"type":"text","value":", Brendan McAndrew","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"CaQgvneWBv"},{"type":"superscript","children":[{"type":"text","value":"1,3","key":"BdZgjwBEYX"}],"key":"yb3CIsTnur"},{"type":"text","value":", Jian Li","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"pKeyrmRqSF"},{"type":"superscript","children":[{"type":"text","value":"4,5","key":"c8KyEyIIde"}],"key":"HmuL21nPES"},{"type":"text","value":", Caleb Spradlin","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"rXqG8DbU9X"},{"type":"superscript","children":[{"type":"text","value":"4,6","key":"i3KMlXLAZE"}],"key":"x3QxJMpCHf"}],"key":"hmWtI3MTbX"}],"key":"X313oEDgAT"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"superscript","children":[{"type":"text","value":"1","key":"iNWz4omMnL"}],"key":"I4YOJv70UI"},{"type":"text","value":" Hydrological Sciences Lab, NASA Goddard Space Flight Center, ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"IywtyR7Mf8"},{"type":"superscript","children":[{"type":"text","value":"2","key":"CKaz3r4eA6"}],"key":"lpsy5hZ1xq"},{"type":"text","value":" University of Maryland, ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"NEidUTD0MR"},{"type":"superscript","children":[{"type":"text","value":"3","key":"kRGtfJa7oN"}],"key":"wangTzfUPX"},{"type":"text","value":" Science Systems and Applications, Inc., ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"O3nIL7Engi"},{"type":"superscript","children":[{"type":"text","value":"4","key":"y4Mi4yyHRo"}],"key":"pvCgogBnju"},{"type":"text","value":" InuTeq, LLC, ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"zoYhjOnkaJ"},{"type":"superscript","children":[{"type":"text","value":"5","key":"mmQLiLBRik"}],"key":"LxEItYwSlj"},{"type":"text","value":" Computational and Information Sciences and Technology Office (CISTO), NASA Goddard Space Flight Center, ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"HIkD3cv1oY"},{"type":"superscript","children":[{"type":"text","value":"6","key":"ctkCVgC72h"}],"key":"Okn1DiuFma"},{"type":"text","value":" High Performance Computing, NASA Goddard Space Flight Center","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"IFQfDKEabr"}],"key":"EQgnsIqU9l"}],"key":"QLbjtL4qL7"}],"key":"P6xttIVdSV"},{"type":"block","kind":"notebook-content","children":[{"type":"admonition","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Learning Objectives","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ocRy1wT5QG"}],"key":"aGqli2EGZ2"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":2,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Learn about the role of modeling in a satellite mission","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"tmsG9jiiz2"}],"key":"LkNDFX99PF"},{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Open, explore, and visualize gridded model output","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"X2A9NjQEWC"}],"key":"NIlYfhQuyd"},{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Compare model output to raster- and point-based observation datasets","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"SRjZyK3I6G"}],"key":"PAiSmlKlWU"}],"key":"WdICM0ZJU2"}],"key":"kdwYGSIg9U"}],"key":"rt6vGac1uv"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The goal of a future snow satellite is to provide improved understanding of global snow mass, as compared to current estimates. However, ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ary5UgF0EB"},{"type":"emphasis","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"a single sensor likely won’t be able to accurately observe all types of snow in all conditions for the entire globe","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Keg0eF64Ff"}],"key":"zjvoUXSVkT"},{"type":"text","value":". Instead, we need to combine future snow observations with other tools - including models and observations from currently available satellites.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"wATzpwPsLh"}],"key":"HAfvkgKym7"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Models can also help to extend snow observations to areas where observations are not available. Data may be missing due to orbit gaps or masked out in regions of higher uncertainty. Remote sensing observations and models can be combined through ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ddRcfzeoaG"},{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"data assimilation","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"JgQY5CR1LH"}],"key":"xCwcrBaqkP"},{"type":"text","value":", a process where observations are used to constrain model estimates.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"rvkgXRXJvf"}],"key":"ZN4d4TY5Kn"},{"type":"image","url":"/myst_assets_folder./images/DAflowchart_v4.png","width":"50%","key":"gXswpjR4yw"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"The figure above shows a conceptual example of how satellite observations with orbit gaps could be combined with a model to produce results with no missing data. (Figure modified from diagram provided by Eunsang Cho)","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"IipbFgYkb8"}],"key":"HloHZe9Vc9"}],"key":"GOH7u9X122"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"What is LIS?","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"oXiObQAWR0"}],"identifier":"what-is-lis","label":"What is LIS?","html_id":"what-is-lis","implicit":true,"key":"hXgih9mTSq"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Since models will likely play a role in processing observations from a snow satellite mission, it is important to become comfortable working with gridded data products. Today we will use sample model output from ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"B9IQeKd40Q"},{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"NASA’s Land Information System (LIS)","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"cLDCygjDgt"}],"key":"U1sZmnICUy"},{"type":"text","value":".","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"UTtAVmx6UO"}],"key":"LYTajP8IJi"},{"type":"blockquote","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"The Land Information System is a software framework for land surface modeling and data assimilation developed with the goal of integrating satellite and ground-based observational data products with advanced modeling techniques to produce estimates of land surface states and fluxes.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"DUgHpKbSgO"}],"key":"t7nJOvyJxs"}],"key":"z1sNMlhMJZ"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"strong","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"TL;DR","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"hcEpkYZIv7"}],"key":"owVFsES8I8"},{"type":"text","value":" LIS = land surface models + data assimilation","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"BjowCVtCVU"}],"key":"Ka178Uqcga"},{"type":"image","url":"/myst_assets_folder./images/LIS_schematic.png","width":"75%","key":"BbVVmwZZTy"},{"type":"paragraph","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"One key feature LIS provides is flexibility to meet user needs. LIS consists of a collection of plug-ins, or modules, that allow users to design simulations with their choice of land surface model, meteorological forcing, data assimilation, hydrological routing, land surface parameters, and more. The plug-in based design also provides extensibility, making it easier to add new functionality to the LIS framework.","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"jkCzeTJg2E"}],"key":"KoptAdWKe9"},{"type":"paragraph","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"Current efforts to expand support for snow modeling include implementation of snow modules, such as ","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"oGS6lamed4"},{"type":"cite","url":"https://doi.org/10.1175/JHM548.1","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"SnowModel","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"ZuSklja55b"}],"kind":"narrative","label":"Liston_2006","identifier":"https://doi.org/10.1175/JHM548.1","enumerator":"1","key":"ktNX9J4wup"},{"type":"text","value":" and ","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"ZxCYve25eu"},{"type":"link","url":"http://www.umr-cnrm.fr/spip.php?article265&lang=en","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"Crocus","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"FovwhtfPg1"}],"urlSource":"http://www.umr-cnrm.fr/spip.php?article265&lang=en","key":"GydFoBN51T"},{"type":"text","value":", into the LIS framework. These models, when run at the scale of ~100 meters, will enable simulation of wind redistribution, snow grain size, and other important processes for more accurate snow modeling.","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"BV337pNWPs"}],"key":"GJysMa14Rh"},{"type":"paragraph","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Development of LIS is led by the ","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"z1cRf0QJe0"},{"type":"link","url":"https://earth.gsfc.nasa.gov/hydro","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Hydrological Sciences Laboratory","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"D5Je0OGPP9"}],"urlSource":"https://earth.gsfc.nasa.gov/hydro","key":"TlWY9hF6Nk"},{"type":"text","value":" at ","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"UxQyB1YMHC"},{"type":"link","url":"https://www.nasa.gov/goddard","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"NASA’s Goddard Space Flight Center","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"tZ0eruFG0R"}],"urlSource":"https://www.nasa.gov/goddard","key":"ua3DjZFskB"},{"type":"text","value":". (Figure above provided by the LIS team)","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"RI75o2WFS6"}],"key":"VPW067kUfo"}],"key":"Uk9mFZuZ9r"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Working with Modeled Output","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ndPZ8X6O0a"}],"identifier":"working-with-modeled-output","label":"Working with Modeled Output","html_id":"working-with-modeled-output","implicit":true,"key":"uERJ3hwNq8"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Here we will use sample model output from a ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"DF6KVl2IU2"},{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"LIS-SnowModel","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"WTS6SxKC2L"}],"key":"NaV0NQ82sR"},{"type":"text","value":" simulation over a ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"foM4QM1BfY"},{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"western Colorado domain","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"rdHqLl7dHe"}],"key":"rnsTvp6aH6"},{"type":"text","value":". Daily estimates of ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"NV9wBJlChh"},{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"SWE, snow depth, and snow density","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"tR1NAKW0vK"}],"key":"LIl2l85xhB"},{"type":"text","value":" are written to output. The SnowModel simulation has a ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"UjBMFPTODv"},{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"spatial resolution of 100 m","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"asBvgAqsjB"}],"key":"hMOYwasL4l"},{"type":"text","value":". We’ve provided four years of output, though here we’ll mostly use output from water year 2020.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"dBpz4rTVuU"}],"key":"lhAK1dx9cQ"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Below, we’ll walk through how to open and interact with the LIS-SnowModel output. Our main objectives are to demonstrate how to do the following with a gridded dataset like LIS-SnowModel:","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"GQBPLVn8HG"}],"key":"O3aHhWw7mR"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":6,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Understand attributes of model data file and available variables","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"LICpurgix9"}],"key":"ckWlCvWIbN"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Create a spatial map of model output","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"NvBoOpb4Ka"}],"key":"CUNvM7Mcjq"},{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Create time series at a point and averaged across domain","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"R5T7GOFdp9"}],"key":"XXrrLxKzh3"},{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Compare LIS-SnowModel to raster and point data","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"cs2Jq3SYUS"}],"key":"ukDJIPvfNr"},{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Create a visualization for quick evaluation of model estimates","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"bNIMUu9ubl"}],"key":"XNH5UzMgfr"}],"key":"vLcysDRjKB"}],"key":"fgKyy6xDBy"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Import Libraries","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"v8hhke7CKl"}],"identifier":"import-libraries","label":"Import Libraries","html_id":"import-libraries","implicit":true,"key":"iZW4TvcQsU"}],"key":"BdEQKlZG7i"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# interface to Amazon S3 filesystem\nimport s3fs\n\n# interact with n-d arrays\nimport numpy as np\nimport xarray as xr\n\n# interact with tabular data (incl. spatial)\nimport pandas as pd\nimport geopandas as gpd\n\n# interactive plots\nimport holoviews as hv\nimport geoviews as gv\nimport hvplot.pandas\nimport hvplot.xarray\n# set bokeh as the holoviews plotting backend\n#hv.extension('bokeh')\n# set holoviews backend to Bokeh\n#gv.extension('bokeh')\n\n# used to find nearest grid cell to a given location\nfrom scipy.spatial import distance\n\nimport fsspec\nfrom datetime import datetime as dt\n\nfrom geoviews import opts\nfrom geoviews import tile_sources as gvts\nfrom datashader.colors import viridis\nimport datashader\nfrom holoviews.operation.datashader import datashade, shade, dynspread, spread, rasterize\nfrom holoviews.streams import Selection1D, Params\nimport panel as pn\nimport param as pm\nimport warnings\nimport holoviews.operation.datashader as hd\nwarnings.filterwarnings(\"ignore\")\n\npn.extension()\npn.param.ParamMethod.loading_indicator =True","key":"SdJX6haybU"},{"type":"output","id":"nAdKaGP1mfcSt0MKWIt8p","data":[{"output_type":"error","traceback":"\u001b[31m---------------------------------------------------------------------------\u001b[39m\n\u001b[31mModuleNotFoundError\u001b[39m                       Traceback (most recent call last)\n\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[1]\u001b[39m\u001b[32m, line 2\u001b[39m\n\u001b[32m      1\u001b[39m \u001b[38;5;66;03m# interface to Amazon S3 filesystem\u001b[39;00m\n\u001b[32m----> \u001b[39m\u001b[32m2\u001b[39m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01ms3fs\u001b[39;00m\n\u001b[32m      4\u001b[39m \u001b[38;5;66;03m# interact with n-d arrays\u001b[39;00m\n\u001b[32m      5\u001b[39m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mnumpy\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mas\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mnp\u001b[39;00m\n\n\u001b[31mModuleNotFoundError\u001b[39m: No module named 's3fs'","ename":"ModuleNotFoundError","evalue":"No module named 's3fs'"}],"key":"ijYlpV7JaT"}],"key":"pJfeF3nGeZ"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Load the LIS-SnowModel Output","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"vMwuSSJPAX"}],"identifier":"load-the-lis-snowmodel-output","label":"Load the LIS-SnowModel Output","html_id":"load-the-lis-snowmodel-output","implicit":true,"key":"SRaPVddD5Y"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"BKdKGsT8Bg"},{"type":"inlineCode","value":"xarray","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"tNmZjLpJ52"},{"type":"text","value":" library makes working with labelled n-dimensional arrays easy and efficient. If you’re familiar with the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Yrquzr7j7d"},{"type":"inlineCode","value":"pandas","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"kArebgN8qh"},{"type":"text","value":" library it should feel pretty familiar.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"cnV4mHOJdi"}],"key":"dSAWIJeRtP"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Here we load the LIS-SnowModel output into an ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"tO1KNavlz3"},{"type":"inlineCode","value":"xarray.Dataset","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"nmbOVUHGG1"},{"type":"text","value":" object:","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"ukfL7H59Ys"}],"key":"sXCvAq1PHg"}],"key":"dcMxHOxIle"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# create S3 filesystem object\ns3 = s3fs.S3FileSystem(anon=False)\n\n# define the name of our S3 bucket\nbucket_name = 'eis-dh-hydro/SNOWEX-HACKWEEK'\n\n# define path to store on S3\nlis_output_s3_path_time_chunk = f's3://{bucket_name}/2022/ZARR/SURFACEMODEL/LIS_HIST_rechunkedV4.d01.zarr'\nlis_output_s3_path = f's3://{bucket_name}/2022/ZARR/SURFACEMODEL/LIS_HIST_default_chunks.d01.zarr/'\n\n# create key-value mapper for S3 object (required to read data stored on S3)\nlis_output_mapper = s3.get_mapper(lis_output_s3_path)\nlis_output_mapper_tc = s3.get_mapper(lis_output_s3_path_time_chunk)\n\n# open the dataset\nlis_output_ds = xr.open_zarr(lis_output_mapper, consolidated=True)\nlis_output_ds_tc = xr.open_zarr(lis_output_mapper_tc, consolidated=True)","key":"OrT0XwDRWI"},{"type":"output","id":"2KgIpjhtoIv8SnuSDUqMv","data":[],"key":"nIsiRczStC"}],"key":"dUW1Kh2Mz4"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Explore the Data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Z2DkZkJjwi"}],"identifier":"explore-the-data","label":"Explore the Data","html_id":"explore-the-data","implicit":true,"key":"R7SDTlDkWm"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Display an interactive widget for inspecting the dataset by running a cell containing the variable name. Expand the dropdown menus and click on the document and database icons to inspect the variables and attributes.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"V579cvrez9"}],"key":"s5bTWPeAsR"}],"key":"uybtEqSMtM"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"lis_output_ds","key":"ucoNCOA3vE"},{"type":"output","id":"x1d4pqwuPR9XsWWUScESj","data":[],"key":"jikpiNIiRI"}],"key":"OwwtQifRPZ"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Accessing Attributes","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"fXUPo6OdQ3"}],"identifier":"accessing-attributes","label":"Accessing Attributes","html_id":"accessing-attributes","implicit":true,"key":"fLs1Dlmt7I"}],"key":"DYb6ch65xY"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Dataset attributes (metadata) are accessible via the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"LQAUvhlomF"},{"type":"inlineCode","value":"attrs","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"CFFjs8FKQ7"},{"type":"text","value":" attribute:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"V26sWJb42j"}],"key":"k7QJLwzYns"}],"key":"n3uGBa5DOb"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"lis_output_ds.attrs","key":"sdDjD7ifg8"},{"type":"output","id":"lC1XSLJWOWiL1LtFWAwOC","data":[],"key":"HxwLaokre3"}],"key":"xSslGtWJiX"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Accessing Variables","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"dZIGiPKmKJ"}],"identifier":"accessing-variables","label":"Accessing Variables","html_id":"accessing-variables","implicit":true,"key":"ORd8h8YNxe"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Variables can be accessed using either ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"eca4LthITh"},{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"dot notation","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Q4ChIzLrtQ"}],"key":"Z0BUxBgJ6Z"},{"type":"text","value":" or ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"es93nh0VE5"},{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"square bracket notation","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ntLYUCnjpT"}],"key":"CJ6OkOW0NN"},{"type":"text","value":". Here we will stick with square bracket notation:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"wmFTjeQM53"}],"key":"f7CdXDdzOM"}],"key":"zvePKcyfi0"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# square bracket notation\nlis_output_ds['SM_SnowDepth_inst']","key":"fxWGBzFcad"},{"type":"output","id":"h_KQB2dHzZx9fozQpMkbB","data":[],"key":"V4emjuMtro"}],"key":"iRHt1S90AR"},{"type":"block","kind":"notebook-content","children":[{"type":"admonition","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Watch out for large datasets!","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"hiXsURix9a"}],"key":"RiBhkMvLrq"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Note that the 4-ish years of model output (1694 daily time steps for a domain of size 6650 x 4800) has a size of over ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"bvdCxwnRUA"},{"type":"strong","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"200 gb","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"fq3coZWoWo"}],"key":"DH3OvSrkvT"},{"type":"text","value":"! As we’ll see below, this is just for an area over western Colorado. If we’re interested in modeling the western United States or CONUS or even global at high resolution, we need to be prepared to work with some large datasets.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"vWpvVNZMHj"}],"key":"i093g7wR7J"}],"key":"N5XgkbzFZj"}],"key":"aL3CmXUdKh"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Dimensions and Coordinate Variables","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"RmOFU9kTW6"}],"identifier":"dimensions-and-coordinate-variables","label":"Dimensions and Coordinate Variables","html_id":"dimensions-and-coordinate-variables","implicit":true,"key":"sUzAoUo7yT"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"The dimensions and coordinate variable fields put the “","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"xyN9smz1Sf"},{"type":"emphasis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"labelled","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"tfeRaI7Ft8"}],"key":"qgn8a4JxDG"},{"type":"text","value":"” in “labelled n-dimensional arrays”:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"uNpQnTX8xQ"}],"key":"h399cnyhIc"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":5,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"strong","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Dimensions:","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"zVADlEUQEy"}],"key":"fXpiGog0Fh"},{"type":"text","value":" labels for each dimension in the dataset (e.g., ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"J58xk5ApcA"},{"type":"inlineCode","value":"time","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"NU6218iXRB"},{"type":"text","value":")","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"pc8sPj6ZIq"}],"key":"ZTbHs3diVw"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"strong","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Coordinates:","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"vPlqN0wwsl"}],"key":"O101ZAIPEv"},{"type":"text","value":" labels for indexing along dimensions (e.g., ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"Eky3Fis3ar"},{"type":"inlineCode","value":"'2020-01-01'","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"wVZ2dhuu9s"},{"type":"text","value":")","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"ZXcu8AOAhu"}],"key":"rM62tRRpWs"}],"key":"ksM4CVHmUx"},{"type":"paragraph","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"We can use these labels to select, slice, and aggregate the dataset.","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"CPogAoE99T"}],"key":"F25kamzscd"}],"key":"ztz7XptEu8"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Subsetting in Space or Time","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"NBToA4hUlt"}],"identifier":"subsetting-in-space-or-time","label":"Subsetting in Space or Time","html_id":"subsetting-in-space-or-time","implicit":true,"key":"LRmw4viYJ0"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"inlineCode","value":"xarray","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"vYVgI3EOuS"},{"type":"text","value":" provides two methods for selecting or subsetting along coordinate variables:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"iO2y9vFVlv"}],"key":"im8VOdqnO1"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":5,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"index selection: ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"BxYUC8myLh"},{"type":"inlineCode","value":"ds.isel(time=0)","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"yow8flNfE7"}],"key":"TFs0u9a9Hr"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"value selection ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"s4q8LKh5re"},{"type":"inlineCode","value":"ds.sel(time='2020-01-01')","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"y1sC7GA0up"}],"key":"CuOe5kb5ii"}],"key":"vDYErvr0k3"},{"type":"paragraph","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"For example, we can use value selection to select based on the the coorindates of a given dimension:","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"ab6YUMFdUG"}],"key":"rcgkSbpJKY"}],"key":"O4jdz9OKsh"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"lis_output_ds.sel(time='2020-01-01')","key":"Iu460AufX7"},{"type":"output","id":"eOfw12nWFIzyY0jQFAgHP","data":[],"key":"qotYLRRMI9"}],"key":"llotMGCi3L"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"GlI2tHIKhz"},{"type":"inlineCode","value":".sel()","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"dip6u5tFHy"},{"type":"text","value":" approach also allows the use of shortcuts in some cases. For example, here we select all timesteps in the month of January 2020. Note that length of the time dimension is now only 31.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"oJ95O858HA"}],"key":"qHuuRG2tzy"}],"key":"QH36XGdkYN"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"lis_output_ds.sel(time='2020-01')","key":"uACE1Rn7v2"},{"type":"output","id":"TvHXh3t30K8wSe_q_A_OV","data":[],"key":"ZClWlEzRRW"}],"key":"WpxNbQlJeI"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":5,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Latitude and Longitude","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"j8qneiUdr9"}],"identifier":"latitude-and-longitude","label":"Latitude and Longitude","html_id":"latitude-and-longitude","implicit":true,"key":"yoi845R5dX"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"You may have noticed that latitude (","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"CzeOuSJa55"},{"type":"inlineCode","value":"lat","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"kngrIijaXQ"},{"type":"text","value":") and longitude (","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"rJKwTy9Khl"},{"type":"inlineCode","value":"lon","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"v6tjoExhwe"},{"type":"text","value":") are not listed as dimensions. This dataset would be easier to work with if ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"RJ9G603ukq"},{"type":"inlineCode","value":"lat","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"gFfyNOH7jT"},{"type":"text","value":" and ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ZzOCe6qJuR"},{"type":"inlineCode","value":"lon","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"zDp0jAaJ1E"},{"type":"text","value":" were coordinate variables and dimensions. Here we define a helper function that reads the spatial information from the dataset attributes, generates arrays containing the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"kL14fhCWLT"},{"type":"inlineCode","value":"lat","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"c7KCm08Lhk"},{"type":"text","value":" and ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Ecs0EDtphJ"},{"type":"inlineCode","value":"lon","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"vGCJGytzpI"},{"type":"text","value":" values, and appends them to the dataset:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"sb73JFnmhl"}],"key":"fFOaTEqckT"}],"key":"x177ZWi1Th"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def add_latlon_coords(dataset: xr.Dataset)->xr.Dataset:\n    \"\"\"Adds lat/lon as dimensions and coordinates to an xarray.Dataset object.\"\"\"\n    \n    # get attributes from dataset\n    attrs = dataset.attrs\n    \n    # get x, y resolutions\n    dx = .001 #round(float(attrs['DX']), 3)\n    dy = .001 #round(float(attrs['DY']), 3)\n       \n    # get grid cells in x, y dimensions\n    ew_len = len(dataset['east_west'])\n    ns_len = len(dataset['north_south'])\n    \n    # get lower-left lat and lon\n    ll_lat = round(float(attrs['SOUTH_WEST_CORNER_LAT']), 3)\n    ll_lon = round(float(attrs['SOUTH_WEST_CORNER_LON']), 3)\n    \n    # calculate upper-right lat and lon\n    ur_lat =  41.5122 #ll_lat + (dy * ns_len)\n    ur_lon = -103.9831 #ll_lon + (dx * ew_len)\n    \n    # define the new coordinates\n    coords = {\n        # create an arrays containing the lat/lon at each gridcell\n        'lat': np.linspace(ll_lat, ur_lat, ns_len, dtype=np.float32, endpoint=False).round(4),\n        'lon': np.linspace(ll_lon, ur_lon, ew_len, dtype=np.float32, endpoint=False).round(4)\n    }\n    \n    lon_attrs = dataset.lon.attrs\n    lat_attrs = dataset.lat.attrs\n    \n    # rename the original lat and lon variables\n    dataset = dataset.rename({'lon':'orig_lon', 'lat':'orig_lat'})\n    # rename the grid dimensions to lat and lon\n    dataset = dataset.rename({'north_south': 'lat', 'east_west': 'lon'})\n    # assign the coords above as coordinates\n    dataset = dataset.assign_coords(coords)\n    dataset.lon.attrs = lon_attrs\n    dataset.lat.attrs = lat_attrs\n    \n    \n    return dataset","key":"ikDOvdUCzV"},{"type":"output","id":"zKuM6TU9_oRLs4SedfvxY","data":[],"key":"Tw0DMjcf51"}],"key":"COG4Y1tJOZ"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now that the function is defined, let’s use it to append ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Nznn37o1oK"},{"type":"inlineCode","value":"lat","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"TSzuvl5ZVN"},{"type":"text","value":" and ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ciTBxfUst4"},{"type":"inlineCode","value":"lon","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"QGPywmypwt"},{"type":"text","value":" coordinates to the LIS output:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"PLfmMzQ8Au"}],"key":"o0cqbLCjUd"}],"key":"r21AkXZFYG"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"lis_output_ds = add_latlon_coords(lis_output_ds)\nlis_output_ds_tc = add_latlon_coords(lis_output_ds_tc)","key":"gutIqHZ1MN"},{"type":"output","id":"MFB3jovvVi4Vuot_igJ3O","data":[],"key":"RrmSIeXFlJ"}],"key":"Q5tZIpdWTr"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Inspect the dataset:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"J9POAxZtvn"}],"key":"XUgvpNVBGQ"}],"key":"xRjVTgUnW1"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"lis_output_ds","key":"KRvnR4MYGi"},{"type":"output","id":"sxRyDOpH43cIT_LFhuckH","data":[],"key":"cfH5ppQhPK"}],"key":"guUpnCQn76"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"vTvNoWEOYB"},{"type":"inlineCode","value":"lat","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"NwyJ5z1gzT"},{"type":"text","value":" and ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"adLH3xwJpm"},{"type":"inlineCode","value":"lon","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"sJDaSvGB60"},{"type":"text","value":" are listed as coordinate variables and have replaced the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"glgmnbxUOq"},{"type":"inlineCode","value":"north_south","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"UpdVCMTaF7"},{"type":"text","value":" and ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"cDmXt5Q8Mi"},{"type":"inlineCode","value":"east_west","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"BvUfSobDEm"},{"type":"text","value":" dimensions. This will make it easier to spatially subset the dataset!","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"CugXfHyP1p"}],"key":"VLVJw3OyHx"}],"key":"AkUZadQRP9"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":5,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Basic Spatial Subsetting","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"wfUPR75Bgn"}],"identifier":"basic-spatial-subsetting","label":"Basic Spatial Subsetting","html_id":"basic-spatial-subsetting","implicit":true,"key":"rbRX7MhIcf"}],"key":"lPs8906uKU"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"We can use the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Qb3zpeRicP"},{"type":"inlineCode","value":"slice()","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"aSOpfirjMg"},{"type":"text","value":" function on the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"AQS7DjQIsV"},{"type":"inlineCode","value":"lat","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"VrNCMaX1Lx"},{"type":"text","value":" and ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Ikbaa05eAq"},{"type":"inlineCode","value":"lon","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ir9thoPXXW"},{"type":"text","value":" dimensions to select data between a range of latitudes and longitudes:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"IsraazbTKn"}],"key":"YDboIw24cv"}],"key":"wR9ckdzUZ3"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# uncomment line below to work with the full domain -> this will be much slower!\n#lis_output_ds.sel(lat=slice(35.5, 41), lon=slice(-109, -104))\n\n# just Grand Mesa -> smaller domain for faster run times\n# note the smaller lat/lon extents in the dimensions\nlis_output_ds.sel(lat=slice(38.6, 39.4), lon=slice(-108.6, -107.1))","key":"YBklKGOPYm"},{"type":"output","id":"szrIT3e5y3Mz14quT9r5w","data":[],"key":"lQKMmpPVxL"}],"key":"VW0Q7r8rCU"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Notice how the sizes of the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"fUtNVVqx4s"},{"type":"inlineCode","value":"lat","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zffqyWEfxU"},{"type":"text","value":" and ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"C7nOgTtidk"},{"type":"inlineCode","value":"lon","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"joV9Qo1TSD"},{"type":"text","value":" dimensions have decreased.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"lFKxo7R0mo"}],"key":"IHDeshifvc"}],"key":"EKpJ8aF5Tk"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":5,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Subset Across Multiple Dimensions","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"lrkIbfPlLq"}],"identifier":"subset-across-multiple-dimensions","label":"Subset Across Multiple Dimensions","html_id":"subset-across-multiple-dimensions","implicit":true,"key":"Cpbw4JgOFe"}],"key":"ixM6O47Liq"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now we will combine the above examples for subsetting both spatially and temporally:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ALpkZGNFiW"}],"key":"Asie9toFmH"}],"key":"UEKHedLFyA"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# define a range of dates to select\nwy_2020_slice = slice('2019-10-01', '2020-09-30')\n\n# define lat/lon for Grand Mesa area\nlat_slice = slice(38.6, 39.4)\nlon_slice = slice(-108.6, -107.1)\n\n# select the snow depth and subset to wy_2020_slice\nsnd_GM_wy2020_ds = lis_output_ds['SM_SnowDepth_inst'].sel(time=wy_2020_slice, lat=lat_slice, lon=lon_slice)\nsnd_GM_wy2020_ds_tc = lis_output_ds_tc['SM_SnowDepth_inst'].sel(time=wy_2020_slice, lat=lat_slice, lon=lon_slice)\n\n# inspect resulting dataset\nsnd_GM_wy2020_ds","key":"h96l7M1u39"},{"type":"output","id":"Th0_q7KhjxCBOwJgcUupE","data":[],"key":"vlckiPhtHA"}],"key":"Wd2HNEFd4v"},{"type":"block","kind":"notebook-content","children":[{"type":"admonition","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Subset for more manageable sizes!","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"GmjYaNH4F0"}],"key":"B2v4c5dnVz"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"We’ve now subsetted both spatially (down to just Grand Mesa domain) and temporally (water year 2020). Note the smaller size of the data array -> ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"ScuCPIR8cX"},{"type":"strong","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"a decrease from over 200 gb to 1.7 gb","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"vylLb5xo76"}],"key":"SkgqVoq1TM"},{"type":"text","value":"! This smaller dataset will be much easier to work with, but feel free to try some of the commands with the full dataset, just give it a few minutes to process!","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"Hqk7Qc9doh"}],"key":"dHByKceqlm"}],"key":"ZTzSoFtC8K"}],"key":"R4EyhVaORG"},{"type":"block","kind":"notebook-content","data":{"tags":[]},"children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plotting","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"VeM7ODleWJ"}],"identifier":"plotting","label":"Plotting","html_id":"plotting","implicit":true,"key":"xRCVgfzav1"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"We’ve imported two plotting libraries:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"q3YfwW7rb3"}],"key":"fYclQC5ybj"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":5,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"inlineCode","value":"matplotlib","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"thsc0Mfc6f"},{"type":"text","value":": static plots","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"QI2Nkbj8HC"}],"key":"rCSqzozzpL"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"inlineCode","value":"hvplot","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"OpFvN69ZfZ"},{"type":"text","value":": interactive plots","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"xSGSYWEdQX"}],"key":"jrkKsGvTOV"}],"key":"am7DRBzzY5"},{"type":"paragraph","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"We can make a quick ","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"X8bckWXCeR"},{"type":"inlineCode","value":"matplotlib","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"S4AWasAj14"},{"type":"text","value":"-based plot for the subsetted data using the ","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"OjkARnFKbM"},{"type":"inlineCode","value":".plot()","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"bQZjFqrr2B"},{"type":"text","value":" function supplied by ","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"kjFqUvhAkI"},{"type":"inlineCode","value":"xarray.Dataset","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"WChg5UaYZI"},{"type":"text","value":" objects. For this example, we’ll select one day and plot it:","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"hmDNsOt90y"}],"key":"fmfap4SRC5"}],"visibility":"show","key":"kEuvc7cX45"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# simple matplotlilb plot\nsnd_GM_wy2020_ds.sel(time='2020-01-01').plot();","key":"dlzTYjp8Xq"},{"type":"output","id":"SmfUDMan8f01BnEuOwGxA","data":[],"key":"nNTrl0CYlW"}],"key":"OtkTWQ1BaJ"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Similarly we can make an interactive plot using the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"a862flp8Gc"},{"type":"inlineCode","value":"hvplot","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"SQI5i5D1pP"},{"type":"text","value":" accessor and specifying a ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"hbXtzRik6g"},{"type":"inlineCode","value":"quadmesh","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"sX2OnzFUvd"},{"type":"text","value":" plot type:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"yVQp1V3JCq"}],"key":"y2dtt5aj9X"}],"key":"jemdxWkdKD"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# hvplot based map\nsnd_GM_20200101_plot = snd_GM_wy2020_ds.sel(time='2020-01-01').hvplot.quadmesh(geo=True, rasterize=True, project=True,\n                                                                               xlabel='lon', ylabel='lat', cmap='viridis',\n                                                                               tiles='EsriImagery')\n\nsnd_GM_20200101_plot","key":"YHpumWFSa0"},{"type":"output","id":"17CyhukzlndA0vI6N89g6","data":[],"key":"yUW8VHUkeG"}],"key":"QaGiKTYtD7"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Pan, zoom, and scroll around the map. Hover over the LIS-SnowModel data to see the data values.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qXBH8cee6G"}],"key":"ZMjVlaQD5a"}],"key":"kzbfjAS97o"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"If we try to plot more than one time-step ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qw71C6BJqS"},{"type":"inlineCode","value":"hvplot","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"clbEEopbX7"},{"type":"text","value":" will also provide a time-slider we can use to scrub back and forth in time:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qM8U3m9sUu"}],"key":"w4kY5CzbEU"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Note:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"U7oMXWQWH8"}],"key":"IaxbYr3UYs"},{"type":"text","value":" the time-slider below will only work running in Jupyter Lab (not on the snowex website)","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"A4eTRNXTK1"}],"key":"U9oElwFEfa"}],"key":"QMNpMrcuvT"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"snd_GM_wy2020_ds.sel(time='2020-01').hvplot.quadmesh(geo=True, rasterize=True, project=True,\n                             xlabel='lon', ylabel='lat', cmap='viridis',\n                             tiles='EsriImagery')","key":"I6Ti7SNd54"},{"type":"output","id":"y8rUSjGqbM2iwzEYFcmrL","data":[],"key":"kk0GNvCZ3x"}],"key":"gaJsdcenzY"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"From here on out we will stick with ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"VIf0xn93p4"},{"type":"inlineCode","value":"hvplot","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Cpze4ROMMT"},{"type":"text","value":" for plotting.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"dzI2tQIRmw"}],"key":"PdYeA5bynY"}],"key":"DGbxiJ7zxN"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":5,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Timeseries Plots","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"sisWkdTxI4"}],"identifier":"timeseries-plots","label":"Timeseries Plots","html_id":"timeseries-plots","implicit":true,"key":"KesYvEL5HE"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"We can generate a timeseries for a given grid cell by selecting and calling the plot function:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"dyeZ6TDoUx"}],"key":"VoI7oiJXio"}],"key":"fuXsyBlVtZ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# define point to take timeseries (note: must be present in coordinates of dataset)\nts_lon, ts_lat = (-107.8702, 39.0504)\n\n# plot timeseries\nsnd_GM_wy2020_ds_tc.sel(lat=ts_lat, lon=ts_lon).hvplot.line(title=f'Snow Depth Timeseries @ Lon: {ts_lon}, Lat: {ts_lat}',\n                                                   xlabel='Date', ylabel='Snow Depth (m)') + \\\n    snd_GM_20200101_plot * gv.Points([(ts_lon, ts_lat)]).opts(size=10, color='red')\n    ","key":"E7miJ4prbO"},{"type":"output","id":"xTWBTxjSvM17dIki7YLS7","data":[],"key":"APgrF8uQzo"}],"key":"iPiEz9SfSh"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"In the next section we’ll learn how to create a timeseries over a broader area.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"esBOYekG31"}],"key":"KPwbjraNl6"}],"key":"NcdPPBonTi"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Aggregation","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"nzwGKctZvo"}],"identifier":"aggregation","label":"Aggregation","html_id":"aggregation","implicit":true,"key":"W3QUsSO0Rr"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"We can perform aggregation operations on the dataset such as ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"W17vcD3Goh"},{"type":"inlineCode","value":"min()","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"PdSn1upGE6"},{"type":"text","value":", ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"MNFm2h9nnm"},{"type":"inlineCode","value":"max()","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"nSN1yVyjEu"},{"type":"text","value":", ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"noM2moNDEL"},{"type":"inlineCode","value":"mean()","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"TIgVVyMtIf"},{"type":"text","value":", and ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"dX0MaRp4iR"},{"type":"inlineCode","value":"sum()","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"RtN8lWt5b8"},{"type":"text","value":" by specifying the dimensions along which to perform the calculation.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ATLK2LZDFf"}],"key":"AHTo8L7fR3"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"For example we can calculate the daily mean snow depth for the region around Grand Mesa for water year 2020:","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"KTnTFKlIlA"}],"key":"UcIN127jO1"}],"key":"S0sN2W1RGy"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Area Average","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qjNLNfeACQ"}],"identifier":"area-average","label":"Area Average","html_id":"area-average","implicit":true,"key":"TEZlhfaj1i"}],"key":"vLRKlBogsm"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# take area-averaged mean at each timestep\nmean_snd_GM_wy2020_ds = snd_GM_wy2020_ds_tc.mean(['lat', 'lon'])\n\n# inspect the dataset\nmean_snd_GM_wy2020_ds","key":"cFSfBl60Oh"},{"type":"output","id":"TC_FchHNqRsRDUjUydZTn","data":[],"key":"crLU2kniCa"}],"key":"eD6MHn6Tzg"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# plot timeseries (hvplot knows how to plot based on dataset's dimensionality!)\nmean_snd_GM_wy2020_ds.hvplot(title='Mean LIS-SnowModel Snow Depth for Grand Mesa area', xlabel='Date', ylabel='Snow Depth (m)')","key":"B0w0NwUOtM"},{"type":"output","id":"AiQPKlIKxXjbLYRwl-d3D","data":[],"key":"uMQSZcvexV"}],"key":"JXNGTVhuAn"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Comparing Model Output","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"OZwy23XSPf"}],"identifier":"comparing-model-output","label":"Comparing Model Output","html_id":"comparing-model-output","implicit":true,"key":"zHjpaKJklf"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Now that we’re familiar with the model output, let’s compare it to two other datasets: SNODAS (raster) and SNOTEL (point).","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"IlOK2YqUpv"}],"key":"Dh87Rcn00S"}],"key":"PROhWW0Ntd"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"LIS-SnowModel (raster) vs. SNODAS (raster)","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"GsbgGWWfGE"}],"identifier":"lis-snowmodel-raster-vs-snodas-raster","label":"LIS-SnowModel (raster) vs. SNODAS (raster)","html_id":"lis-snowmodel-raster-vs-snodas-raster","implicit":true,"key":"LZNdfqUSFt"}],"key":"BMqLjX4OPm"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"First, we’ll load the SNODAS dataset which we also have hosted on S3 as a Zarr store. This command will take a minute or two to run.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"hejZmaEsAq"}],"key":"siXib2Auhw"}],"key":"dXCANi8PTv"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# load SNODAS dataset\n\n#snodas depth\nkey = \"SNODAS/snodas_snowdepth_20161001_20200930.zarr\"    \nsnodas_depth_ds = xr.open_zarr(s3.get_mapper(f\"{bucket_name}/{key}\"), consolidated=True)\n\n# apply scale factor to convert to meters (0.001 per SNODAS user guide)\nsnodas_depth_ds = snodas_depth_ds * 0.001","key":"mmxX7OzeH0"},{"type":"output","id":"79keIN3Oq3MwaB6hp2Yl8","data":[],"key":"gAoidYROPp"}],"key":"vvjIYyAAHr"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Next we define a helper function to extract the (lon, lat) of the nearest grid cell to a given point:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"b6yCSYJmAi"}],"key":"cKDFt2zeWY"}],"key":"G3p4OpMghw"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def nearest_grid(ds, pt):\n    \n    \"\"\"\n    Returns the nearest lon and lat to pt in a given Dataset (ds).\n    \n    pt : input point, tuple (longitude, latitude)\n    output:\n        lon, lat\n    \"\"\"\n    \n    if all(coord in list(ds.coords) for coord in ['lat', 'lon']):\n        df_loc = ds[['lon', 'lat']].to_dataframe().reset_index()\n    else:\n        df_loc = ds[['orig_lon', 'orig_lat']].isel(time=0).to_dataframe().reset_index()\n    \n    loc_valid = df_loc.dropna()\n    pts = loc_valid[['lon', 'lat']].to_numpy()\n    idx = distance.cdist([pt], pts).argmin()\n    \n    return loc_valid['lon'].iloc[idx], loc_valid['lat'].iloc[idx]","key":"Q6ZgUDAVEk"},{"type":"output","id":"64mzTjk18yQJdHunEY7Jz","data":[],"key":"jqvxT4lUVB"}],"key":"aDMbRV73kf"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The next cell will look pretty similar to what we did earlier to plot a timeseries of a single point in the LIS-SnowModel data. The general steps are:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"cJWLSNYhFs"}],"key":"aVYPUmdI6o"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":3,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Extract the coordinates of the SNODAS grid cell nearest to our LIS-SnowModel grid cell (","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"F4WhcYsVUr"},{"type":"inlineCode","value":"ts_lon","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"C6lXfBP2Kz"},{"type":"text","value":" and ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"OvW7ceQejy"},{"type":"inlineCode","value":"ts_lat","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"eJt1AEX3FS"},{"type":"text","value":" from earlier)","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"F1nCY6z3yj"}],"key":"Nq6WTB6vng"},{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Subset the SNODAS and LIS-SnowModel data to the grid cells and date ranges of interest","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"DkjNypL7Wf"}],"key":"uuVhvYXdSf"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Create the plots!","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"oEgVko96cX"}],"key":"qKyCDhovIQ"}],"key":"iINQKwX0a5"}],"key":"HCkoAThUag"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# drop off irrelevant variables\ndrop_vars = ['orig_lat', 'orig_lon']\nlis_output_ds = lis_output_ds.drop(drop_vars)","key":"iJhrprKpKW"},{"type":"output","id":"S9Nl7zf0GmeSI71mPL4zL","data":[],"key":"xXFHYi4qfT"}],"key":"CrvWeh0KpR"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# get lon, lat of snodas grid cell nearest to the LIS coordinates we used earlier\nsnodas_ts_lon, snodas_ts_lat = nearest_grid(snodas_depth_ds, (ts_lon, ts_lat))\n\n# define a date range to plot (shorter = quicker for demo)\nstart_date, end_date = ('2020-01-01', '2020-06-01')\nplot_daterange = slice(start_date, end_date)\n\n# select SNODAS grid cell and subset to plot_daterange\nsnodas_snd_subset_ds = snodas_depth_ds.sel(lon=snodas_ts_lon,\n                                             lat=snodas_ts_lat,\n                                             time=plot_daterange)\n\n# select LIS grid cell and subset to plot_daterange\nlis_snd_subset_ds = lis_output_ds['SM_SnowDepth_inst'].sel(lat=ts_lat,\n                                                        lon=ts_lon,\n                                                        time=plot_daterange)\n\n# create SNODAS snow depth plot\nsnodas_snd_plot = snodas_snd_subset_ds.hvplot(label='SNODAS')\n\n# create LIS snow depth plot\nlis_snd_plot = lis_snd_subset_ds.hvplot(label='LIS-SnowModel')\n\n# create SNODAS vs LIS snow depth plot\nlis_vs_snodas_snd_plot = (lis_snd_plot * snodas_snd_plot)\n\n# display the plot\nlis_vs_snodas_snd_plot.opts(title=f'Snow Depth @ Lon: {ts_lon}, Lat: {ts_lat}',\n                            legend_position='right',\n                            xlabel='Date',\n                            ylabel='Snow Depth (m)')","key":"IFS8o3fkPC"},{"type":"output","id":"WuViCbRsUO1Gs9bkNiFQM","data":[],"key":"yYpygPcL6W"}],"key":"aa9XdHEVWK"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"LIS-SnowModel (raster) vs. SNODAS (raster) vs. SNOTEL (point)","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"DNn2zQKaqD"}],"identifier":"lis-snowmodel-raster-vs-snodas-raster-vs-snotel-point","label":"LIS-SnowModel (raster) vs. SNODAS (raster) vs. SNOTEL (point)","html_id":"lis-snowmodel-raster-vs-snodas-raster-vs-snotel-point","implicit":true,"key":"XivaIBKl17"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Now let’s add SNOTEL point data to our plot.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"fI5a4rtw5r"}],"key":"rjLgbvZTew"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"First, we’re going to define some helper functions to load the SNOTEL data:","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"R73iu1JKgj"}],"key":"PHx6l2BepM"}],"key":"bc08JGPK6E"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# load csv containing metadata for SNOTEL sites in a given state (e.g,. 'colorado')\ndef load_site(state):\n    \n    # define the path to the file\n    key = f\"SNOTEL/snotel_{state}.csv\"\n    \n    # load the csv into a pandas DataFrame\n    df = pd.read_csv(s3.open(f's3://{bucket_name}/{key}', mode='r'))\n    \n    return df\n\n# load SNOTEL data for a specific site\ndef load_snotel_txt(state, var):\n    \n    # define the path to the file\n    key = f\"SNOTEL/snotel_{state}{var}_20162020.txt\"\n    \n    # determine how many lines to skip in the file (they start with #)\n    fh = s3.open(f\"{bucket_name}/{key}\")\n    lines = fh.readlines()\n    skips = sum(1 for ln in lines if ln.decode('ascii').startswith('#'))\n    \n    # load the data into a pandas DataFrame\n    df = pd.read_csv(s3.open(f\"s3://{bucket_name}/{key}\"), skiprows=skips)\n    \n    # convert the Date column from strings to datetime objects\n    df['Date'] = pd.to_datetime(df['Date'])\n    return df","key":"c7XGkkmtSV"},{"type":"output","id":"_mLYeY1kqZvTvl7Wv73AR","data":[],"key":"CbBsOoovc7"}],"key":"mWdfRrHJmb"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"For the purposes of this tutorial let’s load the SNOTEL data for sites in Colorado. We’ll pick one site to plot in a few cells.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"IF0qsamYBl"}],"key":"qbIfsLGgzc"}],"key":"w75MJl4FxP"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# load SNOTEL snow depth for Colorado into a dictionary\nsnotel_depth = {'CO': load_snotel_txt('CO', 'depth')}","key":"Xn3IljGy3L"},{"type":"output","id":"jxRRJdFiX420xYNnoZBbK","data":[],"key":"lE7sPzcbtF"}],"key":"Ix9ierswaX"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"We’ll need another helper function to load the depth data:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"YytXHlk6no"}],"key":"WZbRp3XEZs"}],"key":"ce47l8QtPk"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# get snotel depth\ndef get_depth(state, site, start_date, end_date):\n    \n    # grab the depth for the given state (e.g., CO)\n    df = snotel_depth[state]\n    \n    # define a date range mask\n    mask = (df['Date'] >= start_date) & (df['Date'] <= end_date)\n    \n    # use mask to subset between time range\n    df = df.loc[mask]\n    \n    # extract timeseries for the given site\n    return pd.concat([df.Date, df.filter(like=site)], axis=1).set_index('Date')","key":"oWkhzWAWLu"},{"type":"output","id":"A4sk9Rsi6KqfMJd1ZYQLA","data":[],"key":"Up9XoeTBB3"}],"key":"cyI8XdcMzr"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Load the site metadata for Colorado:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"hWrMJNJWLa"}],"key":"nFMBUnpsVB"}],"key":"Gleq84Wfdp"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"co_sites = load_site('colorado')\n\n# peek at the first 5 rows\nco_sites.head()","key":"hFeNpjfWkt"},{"type":"output","id":"QBRVPK7wfQSztgJe-eMRp","data":[],"key":"E9uTTNjKom"}],"key":"B1nUmVOJEV"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The point we’ve been using so far in the tutorial actually corresponds to the coordinates for the Park Reservoir SNOTEL on Grand Mesa! Let’s extract the site data for that point:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"SpcdmGtae8"}],"key":"E1YNZWrzVc"}],"key":"tq0MFJoqPB"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# get the depth data by passing the site name to the get_depth() function\npark_res_snd_df = get_depth('CO', 'Park Reservoir (682)', start_date, end_date)\n\n# convert from cm to m\npark_res_snd_df = park_res_snd_df / 100","key":"CHykjZLBS9"},{"type":"output","id":"L9ju6Y9mFK5uZN5rfrxAO","data":[],"key":"BnnziwfnHh"}],"key":"Qj7Q0vvGtF"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now we’re ready to plot:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"gcdAtmhmzf"}],"key":"QeLbzXxC4d"}],"key":"Jcm1jAGpUV"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# create SNOTEL plot\npark_res_plot = park_res_snd_df.hvplot(label='SNOTEL')\n\n# combine the SNOTEl plot with the LIS vs SNODAS plot\n(lis_vs_snodas_snd_plot * park_res_plot).opts(title=f'Snow Depth @ Lon: {ts_lon}, Lat: {ts_lat}', legend_position='right')","key":"BrbVhP5dwV"},{"type":"output","id":"83q8nkphuAd8TCJJlKvnt","data":[],"key":"I7ddbPdWzy"}],"key":"WwEwtONAoC"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Interactive Data Exploration","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"cKCN11nXpQ"}],"identifier":"interactive-data-exploration","label":"Interactive Data Exploration","html_id":"interactive-data-exploration","implicit":true,"key":"qe0H3AEU9z"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Note:You must run the following code in JupyterLab for interactivity","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"RSn22hb5qY"}],"key":"Xqz0Nt0PQl"}],"key":"hTOT8PXWxv"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"We’ve now built up the separate pieces for visualizing LIS-SnowModel output spatially and temporally, and we’ve combined our time series with those from SNOTEL stations and SNODAS. Now we can bring it all together in an interactive tool.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"r6oKkaDc8a"}],"key":"bnR0bu9bd5"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"The code in the cells below will generate an interactive panel for comparing of LIS-SnowModel output, SNODAS, and SNOTEL snow depth and snow water equivalent at SNOTEL site locations.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"Ib9rtLZ0Xc"}],"key":"dX6Lhl5t7O"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"strong","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Note: some cells below take several minutes to run and some aspects of the interactive widgets may not work in the rendered version on the Hackweek site.","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"KoxxIzSjOf"}],"key":"ZVBcm8cRey"}],"key":"rwiwuY3gs4"}],"key":"g1joE1PVLX"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Load Data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Y332HpXEYw"}],"identifier":"load-data","label":"Load Data","html_id":"load-data","implicit":true,"key":"yN82WwSdd2"}],"key":"J622mrQOrg"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"SNOTEL Sites info","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"UhNkIm8zxC"}],"identifier":"snotel-sites-info","label":"SNOTEL Sites info","html_id":"snotel-sites-info","implicit":true,"key":"q9Kclz7Co0"}],"key":"j81bd2MUvD"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# create dictionary linking state names and abbreviations\nsnotel = {\"CO\" : \"colorado\",\n          \"ID\" : \"idaho\",\n          \"NM\" : \"newmexico\",\n          \"UT\" : \"utah\",\n          \"WY\" : \"wyoming\"}","key":"WnamTt2fwP"},{"type":"output","id":"xr0po5UD6nbWh48h_yhta","data":[],"key":"mjpJQ0NWvB"}],"key":"YueYRxYkt3"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# load SNOTEL site metadata for sites in the given state\ndef load_site(state):\n    \n    # define path to file\n    key = f\"SNOTEL/snotel_{state}.csv\"\n    \n    # load csv into pandas DataFrame\n    df = pd.read_csv(s3.open(f'{bucket_name}/{key}', mode='r'))\n    \n    return df ","key":"lnoiPCTHkG"},{"type":"output","id":"bJM21TJF_U6DLC46I-0mi","data":[],"key":"cZVOWgjnnI"}],"key":"zmxxFiYFLF"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"SNOTEL Depth & SWE","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"vXWHxIZbr7"}],"identifier":"snotel-depth-swe","label":"SNOTEL Depth & SWE","html_id":"snotel-depth-swe","implicit":true,"key":"L03czcho9Y"}],"key":"hi3KZLmI3j"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def load_snotel_txt(state, var):\n    \n    # define path to file\n    key = f\"SNOTEL/snotel_{state}{var}_20162020.txt\"\n\n    # open text file\n    fh = s3.open(f\"{bucket_name}/{key}\")\n    \n    # read each line and note those that begin with '#'\n    lines = fh.readlines()\n    skips = sum(1 for ln in lines if ln.decode('ascii').startswith('#'))\n    \n    # load txt file into pandas DataFrame (skipping lines beginning with '#')\n    df = pd.read_csv(s3.open(f\"{bucket_name}/{key}\"), skiprows=skips)\n    \n    # convert Date column from str to pandas datetime objects\n    df['Date'] = pd.to_datetime(df['Date'])\n    return df","key":"iei3CqxdMo"},{"type":"output","id":"0FkZUmeyXRBAOjvEJwhkY","data":[],"key":"BwhMPkJBsU"}],"key":"F0syWx0eGK"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# load SNOTEL depth & swe into dictionaries\n\n# define empty dicts\nsnotel_depth = {}\nsnotel_swe = {}\n\n# loop over states and load SNOTEL data\nfor state in snotel.keys():\n    print(f\"Loading state {state}\")\n    snotel_depth[state] = load_snotel_txt(state, 'depth')\n    snotel_swe[state] = load_snotel_txt(state, 'swe')","key":"Ho3xReuXXz"},{"type":"output","id":"RDt3FkWhRdPl7G0CciVb6","data":[],"key":"AX8rosFhZv"}],"key":"VFcBMpMg1E"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"SNODAS SWE","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"q6dSUnj27T"}],"identifier":"snodas-swe","label":"SNODAS SWE","html_id":"snodas-swe","implicit":true,"key":"NRgO9qjmpO"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"We’ve already loaded in SNODAS snow depths, but here we’ll load in SWE. As above, this cell might take a few minutes to run since it’s a large dataset to read.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"XUpGzGbMGy"}],"key":"Vgv1pRnJ3r"}],"key":"xTsHuRdDq7"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# load snodas swe data\nkey = \"SNODAS/snodas_swe_20161001_20200930.zarr\"\nsnodas_swe_ds = xr.open_zarr(s3.get_mapper(f\"{bucket_name}/{key}\"), consolidated=True)","key":"UBb9GGHQmC"},{"type":"output","id":"efP4mc9O0PXMHnZ__ZzdX","data":[],"key":"wplWQlqnlh"}],"key":"pym8gQaOBl"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"LIS-SnowModel Outputs","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"usScYPmcXz"}],"identifier":"lis-snowmodel-outputs","label":"LIS-SnowModel Outputs","html_id":"lis-snowmodel-outputs","implicit":true,"key":"pHFZeLSe5S"}],"key":"jf7xJlrEeQ"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"We’ve already read in the LIS-SnowModel data above. Here we subset by time for October 2019 - June 2020.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"pfDQSIaI0x"}],"key":"BNP4kN6LCA"}],"key":"zTcCfVE2NW"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# subset LIS data for winter 2020 \ntime_range = slice('2019-10-01', '2020-06-30')\nlis_sf = lis_output_ds_tc.sel(time=time_range)\nlis_sf = lis_sf.drop(drop_vars)","key":"CIRL4wWX8r"},{"type":"output","id":"usr5oA5X8-rX1dIqNja-E","data":[],"key":"X4MoXlVNxW"}],"key":"HSXN2Yf1hI"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"In the next cell, we extract the data variable names and timesteps from the LIS outputs. These will be used to define the widget options.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Bn9hfBfYFT"}],"key":"ksyqc06eH9"}],"key":"weA1XHUiS3"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# gather metadata from LIS\n# get variable names:string\nvnames = list(lis_sf.data_vars)\nprint(vnames)\n\n# get time-stamps:string\ntstamps = list(np.datetime_as_string(lis_sf.time.values, 'D'))\nprint(len(tstamps), tstamps[0], tstamps[-1])","key":"z3xg79EwDk"},{"type":"output","id":"s_IVRESQkjflLG1K8ppIS","data":[],"key":"HJAnd8DvKC"}],"key":"QaCXsdG87Q"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"By default, the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"J46cv3KoDr"},{"type":"inlineCode","value":"holoviews","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zhMvX1NdgC"},{"type":"text","value":" plotting library automatically adjusts the range of plot colorbars based on the range of values in the data being plotted. This may not be ideal when comparing data on different timesteps. In the next cell we assign the upper and lower bounds for each data variable which we’ll later use to set a static colorbar range.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"tTRbYgCjzP"}],"key":"YjGAOZDXXd"}],"key":"HL1YvM7g7x"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"cmap_lims = {'SM_SWE_inst': (0.0, 3.0),\n 'SM_SnowDensity_inst': (100, 550.0),\n 'SM_SnowDepth_inst': (0.0, 6.5)}","key":"ZVFgGEA8bA"},{"type":"output","id":"LOMAkoLHJcFMV0Gjl37Zn","data":[],"key":"ikmGkgmh1G"}],"key":"zFDWg1mxWz"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Interactive Widget","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"rQhqtsFlsy"}],"identifier":"interactive-widget","label":"Interactive Widget","html_id":"interactive-widget","implicit":true,"key":"XHfGoFqJj5"},{"type":"heading","depth":4,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"SNOTEL Site Map and Timeseries","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Jm1Y6KMe6G"}],"identifier":"snotel-site-map-and-timeseries","label":"SNOTEL Site Map and Timeseries","html_id":"snotel-site-map-and-timeseries","implicit":true,"key":"EvATbF4L3a"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"The two cells that follow will create an interactive panel for comparing LIS-SnowModel, SNODAS, and SNOTEL snow depth and snow water equivalent. The SNOTEL site locations are plotted as points on an interactive map for each state. Hover over the sites to view metadata and click on a site to generate a timeseries!","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"lhTzW0Ef29"}],"key":"JMU0nojzvO"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"strong","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Note: it will take some time for the timeseries to display.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"JxtNgjuCMW"}],"key":"uNLdT3WCcJ"}],"key":"fkdsQg61HR"}],"key":"szxGpVvjOC"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# get snotel depth\ndef get_depth(state, site, ts, te):\n    df = snotel_depth[state]\n    \n    # subset between time range\n    mask = (df['Date'] >= ts) & (df['Date'] <= te)\n    df = df.loc[mask]\n    \n    # extract timeseries for the site\n    return pd.concat([df.Date, df.filter(like=site)], axis=1).set_index('Date')\n\n# get snotel swe\ndef get_swe(state, site, ts, te):\n    df = snotel_swe[state]\n    \n    # subset between time range\n    mask = (df['Date'] >= ts) & (df['Date'] <= te)\n    df = df.loc[mask]\n    \n    # extract timeseries for the site\n    return pd.concat([df.Date, df.filter(like=site)], axis=1).set_index('Date')\n\n# co-locate site & LIS-SnowModel model cell\ndef nearest_grid(pt):\n    # pt : input point, tuple (longtitude, latitude)\n    # output:\n    #        x_idx, y_idx \n    loc_valid = df_loc.dropna()\n    pts = loc_valid[['lon', 'lat']].to_numpy()\n    idx = distance.cdist([pt], pts).argmin()\n\n    return loc_valid['east_west'].iloc[idx], loc_valid['north_south'].iloc[idx]\n\n# get LIS-SnowModel variable \ndef var_subset(dset, v, lon, lat, ts, te):\n    return dset[v].sel(lon=lon, lat=lat, method=\"nearest\").sel(time=slice(ts, te)).load()\n\n# line plots\ndef line_callback(index, state, vname, ts_tag, te_tag):\n    sites = load_site(snotel[state])\n    row = sites.iloc[1]\n    \n    tmp = var_subset(lis_sf, vname, row.lon, row.lat, ts_tag, te_tag) \n    xr_sf = xr.zeros_like(tmp)\n    \n    xr_snodas = xr_sf\n    \n    ck = get_depth(state, row.site_name, ts_tag, te_tag).to_xarray().rename({'Date': 'time'})\n    xr_snotel = xr.zeros_like(ck)\n    \n    if not index:\n        title='Var: -- Lon: -- Lat: --'\n        return (xr_sf.hvplot(title=title, color='blue', label='LIS-SnowModel') \\\n                * xr_snotel.hvplot(color='red', label='SNOTEL') \\\n                * xr_snodas.hvplot(color='green', label='SNODAS')).opts(legend_position='right')\n        \n\n    else:\n        sites = load_site(snotel[state])\n        first_index = index[0]\n        row = sites.iloc[first_index]\n    \n        \n        xr_sf = var_subset(lis_sf, vname, row.lon, row.lat, ts_tag, te_tag)\n    \n        vs = vname.split('_')[1]\n        title=f'Var: {vs} Lon: {row.lon} Lat: {row.lat}'\n\n        \n        # update snotel data \n        if 'depth' in vname.lower():\n            xr_snotel =  get_depth(state, row.site_name, ts_tag, te_tag).to_xarray().rename({'Date': 'time'})*0.01\n            xr_snodas =  var_subset(snodas_depth_ds, 'SNOWDEPTH', row.lon, row.lat, ts_tag, te_tag)\n        \n        if 'swe' in vname.lower():\n            xr_snotel =  get_swe(state, row.site_name, ts_tag, te_tag).to_xarray().rename({'Date': 'time'})/1000\n            xr_snodas =  var_subset(snodas_swe_ds, 'SWE', row.lon, row.lat, ts_tag, te_tag)/1000\n\n    \n        return xr_sf.hvplot(title=title, color='blue', label='LIS-SnowModel') \\\n               * xr_snotel.hvplot(color='red', label='SNOTEL') \\\n               * xr_snodas.hvplot(color='green', label='SNODAS')\n\n","visibility":"show","key":"ozB9oP8gGS"},{"type":"output","id":"TGB_a1XYtNBM0RbwiIda9","data":[],"visibility":"show","key":"rxuOZoi2Op"}],"visibility":"show","key":"dSofizQdis"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# satic snowdepth as background\ndds = lis_sf['SM_SnowDepth_inst'].sel(time='2020-02-01').load()","key":"OdDm2wRCpf"},{"type":"output","id":"Li5cax-BJ1WwDH95YGEYf","data":[],"key":"mPwawVFqMr"}],"key":"Xxoj6gw2iQ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# prepare the panel that will display a static plot of snow depth. Snotel sites will be plotted on top\nimg = dds.hvplot.quadmesh(geo=True, rasterize=True, project=True,\n                             xlabel='lon', ylabel='lat', cmap='viridis',\n                             clim=(0,1))\nsnow_depth_bg=hd.regrid(img)","key":"Ve5uB8pNfb"},{"type":"output","id":"0WJ9jjJNFaN_IVkBskDdQ","data":[],"key":"e3zXKbk6wE"}],"key":"ShLDNCrmkt"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# sites on map\ndef plot_points(state):  \n    # dataframe to hvplot obj Points\n    sites=load_site(snotel[state])\n    pts_opts=dict(size=10, nonselection_alpha=0.5,tools=['tap', 'hover'])\n    #site_points=sites.hvplot.points(x='lon', y='lat', c='elev', cmap='fire', geo=True, hover_cols=['site_name', 'ntwk', 'state', 'lon', 'lat']).opts(**pts_opts)  \n    site_points=sites.hvplot.points(x='lon', y='lat', color='black',geo=True, hover_cols=['site_name', 'ntwk', 'state', 'lon', 'lat']).opts(**pts_opts)  \n    return site_points\n\n# base map\ntiles = gvts.OSM()\n\n# state widget\nstate_select = pn.widgets.Select(options=list(snotel.keys()), name=\"State\")\nstate_stream = Params(state_select, ['value'], rename={'value':'state'})\n\n# variable widget\nvar_select = pn.widgets.Select(options=['SM_SnowDepth_inst', 'SM_SWE_inst'], name=\"LIS Variable List\")\nvar_stream = Params(var_select, ['value'], rename={'value':'vname'})\n\n# date range widget\ndate_fmt = '%Y-%m-%d'\nsdate_input = pn.widgets.DatetimeInput(name='Start date', value=dt(2019,10,1),start=dt.strptime(tstamps[0], date_fmt), end=dt.strptime(tstamps[-1], date_fmt), format=date_fmt)\nsdate_stream = Params(sdate_input, ['value'], rename={'value':'ts_tag'})\nedate_input = pn.widgets.DatetimeInput(name='End date', value=dt(2020,6,30),start=dt.strptime(tstamps[0], date_fmt), end=dt.strptime(tstamps[-1], date_fmt),format=date_fmt)\nedate_stream = Params(edate_input, ['value'], rename={'value':'te_tag'})\n\n# generate site points as dynamic map\n# plots points and calls plot_points() when user selects a site\nsite_dmap = hv.DynamicMap(plot_points, streams=[state_stream]).opts(height=400, width=600)\n# pick site\nselect_stream = Selection1D(source=site_dmap)\n\n# link widgets to callback function\nline = hv.DynamicMap(line_callback, streams=[select_stream, state_stream, var_stream, sdate_stream, edate_stream])\n\n# create panel layout\npn.Row(snow_depth_bg*site_dmap*tiles, pn.Column(state_select, var_select, pn.Row(sdate_input, edate_input), line))","visibility":"show","key":"vetnp4eCQC"},{"type":"output","id":"o-kxV_b7AzBoxkoem6UoL","data":[],"visibility":"show","key":"hWxA574uSZ"}],"visibility":"show","key":"GIY379yMG6"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Exercises","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"azVVEIYurG"}],"identifier":"exercises","label":"Exercises","html_id":"exercises","implicit":true,"key":"fNSHNKwl0J"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"You now know how to see what variables are available in a typical model output file and you’ve learned how to inspect gridded model estimates both spatially and temporally. Below are a few exercises for both practicing the above skills and for becoming more familiar with the sample model output.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"aQHxghuOoD"}],"key":"CR6HiAorCs"},{"type":"heading","depth":3,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Exercise 1","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"peLBfB5hDW"}],"identifier":"exercise-1","label":"Exercise 1","html_id":"exercise-1","implicit":true,"key":"HerO2ISIaY"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"So far we’ve mostly worked with the Grand Mesa region. Can you spatially subset the data to inspect the LIS-SnowModel estimates for the Front Range? What about for Senator Beck basin? Try to use hvplot to plot a map of SWE values for February 2020.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"eOyF7iIGa7"}],"key":"riTIU46V0S"},{"type":"heading","depth":3,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Exercise 2","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"XTCwySfbIj"}],"identifier":"exercise-2","label":"Exercise 2","html_id":"exercise-2","implicit":true,"key":"OzzWm7PeuQ"},{"type":"paragraph","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Here we focused on water year 2020. Can you select a point (maybe the same Park Reservoir SNOTEL point we worked with here) and make a multi-year time series?","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"SZVVWn9iwg"}],"key":"QE9HLDnetL"},{"type":"heading","depth":3,"position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"Exercise 3 (for an extra challenge!)","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"zd2tLpBuNv"}],"identifier":"exercise-3-for-an-extra-challenge","label":"Exercise 3 (for an extra challenge!)","html_id":"exercise-3-for-an-extra-challenge","implicit":true,"key":"nuwX3JuSpy"},{"type":"paragraph","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"We learned about the SnowEx database in a tutorial earlier this week. Can you create a new notebook for combining the model output with your choice of field observation available in the database? Does the model over or underestimate the SnowEx observation?","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"Q96d5sKFab"}],"key":"daHK6rjqJl"}],"key":"FVp0l3u2PP"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Mdo118uHN1"}],"identifier":"conclusion","label":"Conclusion","html_id":"conclusion","implicit":true,"key":"sFzmu6bVIm"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"We’re now more familiar with model output and how to interact with it in Python. The code in this notebook is a great jumping off point for developing more advanced comparisons and interactive widgets.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"T2D1XK26ZI"}],"key":"rG8vhKtl8G"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"The Python code can be adapted to other LIS simulations and to other model output as well, with minor modifications. Anyone interested in testing your new skills can combine what you learned here with the other SnowEx Hackweek tutorials - try comparing the LIS-SnowModel output with other snow observations collected during the 2017 field campaign!","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"OVKUQ6hJSH"}],"key":"DJmBNIJMDY"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"For more information on ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"bVQfYdzhXe"},{"type":"link","url":"https://lis.gsfc.nasa.gov/","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"NASA’s Land Information System","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"icoezPo4IL"}],"urlSource":"https://lis.gsfc.nasa.gov/","key":"r6xGSYavrM"},{"type":"text","value":" please see the links below","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"QfPAk9LQ2v"}],"key":"RAquTQar8F"}],"key":"PZiKyC7HCz"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Resources","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"EOxB0k1Em9"}],"identifier":"resources","label":"Resources","html_id":"resources","implicit":true,"key":"ZCaIIyODrl"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Links","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"zX1RFDllSt"}],"key":"IRb55go6sO"}],"key":"KxauvEbxBw"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":5,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"link","url":"https://lis.gsfc.nasa.gov/","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"LIS Website","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"drG4oxhavG"}],"urlSource":"https://lis.gsfc.nasa.gov/","key":"SOWABMrvwt"}],"key":"UfrMykHKFE"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"link","url":"https://github.com/NASA-LIS/LISF","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"LIS on GitHub","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"bJrWzdA2k3"}],"urlSource":"https://github.com/NASA-LIS/LISF","error":true,"key":"zUbteSAxDz"}],"key":"FaVaDwmy5d"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"link","url":"https://github.com/NASA-LIS/LISF/blob/master/docs/","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"LIS Documentation","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"CqD0avDnTk"}],"urlSource":"https://github.com/NASA-LIS/LISF/blob/master/docs/","data":{"kind":"file","org":"NASA-LIS","repo":"LISF","reference":"master","file":"docs/","raw":"https://raw.githubusercontent.com/NASA-LIS/LISF/master/docs/"},"internal":false,"protocol":"github","key":"VbI8X6WLvY"}],"key":"xSlwfd4h5E"},{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"link","url":"https://github.com/bmcandr/lis-public-tc-walkthrough","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"LIS Test Case Walkthrough","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"o4l1eol99v"}],"urlSource":"https://github.com/bmcandr/lis-public-tc-walkthrough","error":true,"key":"OanyJDAMSS"}],"key":"FfDHFiBMHw"}],"key":"F1HmRkbYlP"},{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"strong","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"References","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"IypOFUQTuO"}],"key":"BHqng289GW"}],"key":"GUD2xdazyh"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":12,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":12,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Kumar, S.V., C.D. Peters-Lidard, Y. Tian, P.R. Houser, J. Geiger, S. Olden, L. Lighty, J.L. Eastman, B. Doty, P. Dirmeyer, J. Adams, K. Mitchell, E. F. Wood, and J. Sheffield, 2006: Land Information System - An interoperable framework for high resolution land surface modeling. Environ. Modeling & Software, 21, 1402-1415, ","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"mD549FXm5O"},{"type":"cite","url":"https://doi.org/10.1016/j.envsoft.2005.07.004","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"KUMAR ","key":"iinVuXeJYA"},{"type":"emphasis","children":[{"type":"text","value":"et al.","key":"uxYGavZHrh"}],"key":"sYVMmh8YSi"},{"type":"text","value":" (2006)","key":"wshl7kuohB"}],"kind":"narrative","label":"KUMAR_2006","identifier":"https://doi.org/10.1016/j.envsoft.2005.07.004","enumerator":"2","key":"MgDQ2rpXgW"}],"key":"A3lPOf8wtK"}],"key":"xOPSoo4dYb"},{"type":"listItem","spread":true,"position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Peters-Lidard, C.D., P.R. Houser, Y. Tian, S.V. Kumar, J. Geiger, S. Olden, L. Lighty, B. Doty, P. Dirmeyer, J. Adams, K. Mitchell, E.F. Wood, and J. Sheffield, 2007: High-performance Earth system modeling with NASA/GSFC’s Land Information System. Innovations in Systems and Software Engineering, 3(3), 157-165, ","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"XGIPLjO9iP"},{"type":"cite","url":"https://doi.org/10.1007/s11334-007-0028-x","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Peters-Lidard ","key":"YWb4VxTOco"},{"type":"emphasis","children":[{"type":"text","value":"et al.","key":"avLpnyX6Qg"}],"key":"CInhSvYFP3"},{"type":"text","value":" (2007)","key":"Dp6kBy1tEZ"}],"kind":"narrative","label":"Peters_Lidard_2007","identifier":"https://doi.org/10.1007/s11334-007-0028-x","enumerator":"3","key":"vi2iVtDiWF"}],"key":"wW0QFLt9hA"}],"key":"bNr9VXZTDr"}],"key":"Akux9jCHWO"},{"type":"code","lang":"","value":"","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"Zhu51WRim6"}],"key":"qyMvY56Or3"}],"key":"kkUGaqFTBh"},"references":{"cite":{"order":["Liston_2006","KUMAR_2006","Peters_Lidard_2007"],"data":{"Liston_2006":{"label":"Liston_2006","enumerator":"1","doi":"10.1175/jhm548.1","html":"Liston, G. E., & Elder, K. (2006). A Distributed Snow-Evolution Modeling System (SnowModel). <i>Journal of Hydrometeorology</i>, <i>7</i>(6), 1259–1276. <a target=\"_blank\" rel=\"noreferrer\" href=\"https://doi.org/10.1175/jhm548.1\">10.1175/jhm548.1</a>","url":"https://doi.org/10.1175/jhm548.1"},"KUMAR_2006":{"label":"KUMAR_2006","enumerator":"2","doi":"10.1016/j.envsoft.2005.07.004","html":"KUMAR, S., PETERSLIDARD, C., TIAN, Y., HOUSER, P., GEIGER, J., OLDEN, S., LIGHTY, L., EASTMAN, J., DOTY, B., & DIRMEYER, P. (2006). Land information system: An interoperable framework for high resolution land surface modeling. <i>Environmental Modelling &amp; Software</i>, <i>21</i>(10), 1402–1415. <a target=\"_blank\" rel=\"noreferrer\" href=\"https://doi.org/10.1016/j.envsoft.2005.07.004\">10.1016/j.envsoft.2005.07.004</a>","url":"https://doi.org/10.1016/j.envsoft.2005.07.004"},"Peters_Lidard_2007":{"label":"Peters_Lidard_2007","enumerator":"3","doi":"10.1007/s11334-007-0028-x","html":"Peters-Lidard, C. D., Houser, P. R., Tian, Y., Kumar, S. V., Geiger, J., Olden, S., Lighty, L., Doty, B., Dirmeyer, P., Adams, J., Mitchell, K., Wood, E. F., & Sheffield, J. (2007). High-performance Earth system modeling with NASA/GSFC’s Land Information System. <i>Innovations in Systems and Software Engineering</i>, <i>3</i>(3), 157–165. <a target=\"_blank\" rel=\"noreferrer\" href=\"https://doi.org/10.1007/s11334-007-0028-x\">10.1007/s11334-007-0028-x</a>","url":"https://doi.org/10.1007/s11334-007-0028-x"}}}},"footer":{"navigation":{"prev":{"title":"Neural Networks with PyTorch","url":"/notebooks/pytorch-tutorial","group":"Analysis and Machine Learning"},"next":{"title":"Reanalysis Data Access","url":"/notebooks/ucla-data-access","group":"Analysis and Machine Learning"}}},"domain":"http://localhost:3000"}