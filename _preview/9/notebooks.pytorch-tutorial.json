{"version":2,"kind":"Notebook","sha256":"01f4d8fc291599d82686ca3a8c17e20fc258edbcfb559b44e81a2b4ff6a72d23","slug":"notebooks.pytorch-tutorial","location":"/notebooks/pytorch_tutorial.ipynb","dependencies":[],"frontmatter":{"title":"Neural Networks with PyTorch","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"The SnowPit Community","given":"The SnowPit","family":"Community"},"name":"The SnowPit Community","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true}},"github":"https://github.com/SnowEx/snow-cookbook","copyright":"2025","affiliations":[{"id":"UAlbany","name":"University at Albany (SUNY)","department":"Atmospheric and Environmental Sciences","url":"https://www.albany.edu/daes"},{"id":"CISL","name":"NSF National Center for Atmospheric Research","department":"Computational and Information Systems Lab","url":"https://www.cisl.ucar.edu"},{"id":"Unidata","name":"NSF Unidata","url":"https://www.unidata.ucar.edu"},{"id":"Argonne","name":"Argonne National Laboratory","department":"Environmental Science Division","url":"https://www.anl.gov/evs"},{"id":"CarbonPlan","name":"CarbonPlan","url":"https://carbonplan.org"},{"id":"NVIDIA","name":"NVIDIA Corporation","url":"https://www.nvidia.com/"}],"numbering":{"title":{"offset":1}},"edit_url":"https://github.com/SnowEx/snow-cookbook/blob/HEAD/notebooks/pytorch_tutorial.ipynb","exports":[{"format":"ipynb","filename":"pytorch_tutorial.ipynb","url":"/snow-cookbook/_preview/9/build/pytorch_tutorial-994daceef9279acf59f91e482ea8002e.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"This is a notebook designed to introduce users to machine learning using ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"CQBxeAnxMr"},{"type":"inlineCode","value":"PyTorch","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"EzUqgcyqiX"},{"type":"text","value":" and station data. The ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ixmkqA06lL"},{"type":"inlineCode","value":"metloom","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"rIZgfzRy0K"},{"type":"text","value":" package developed by M3Works is needed to run this script.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"pbk1jZ57bh"}],"key":"ooDk2W2VJ6"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"This notebook is adapted from a SnowEx Hackweek tutorial developed by Ibrahim Alabi. The full tutorial may be found here: ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"O43O7ABLKH"},{"type":"link","url":"https://snowex-2024.hackweek.io/tutorials/NN_with_Pytorch/intro.html","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"https://​snowex​-2024​.hackweek​.io​/tutorials​/NN​_with​_Pytorch​/intro​.html","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"YueCYxdUfn"}],"urlSource":"https://snowex-2024.hackweek.io/tutorials/NN_with_Pytorch/intro.html","key":"c0pbqKHnhF"}],"key":"gfAC0LYh1V"}],"key":"GF8gMFSZwp"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"What is Machine Learning?","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zXVkSmSaBj"}],"identifier":"what-is-machine-learning","label":"What is Machine Learning?","html_id":"what-is-machine-learning","implicit":true,"key":"xm5cmKzXAa"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Machine learning (ML) is a field of artificial intelligence (AI) that focuses on developing algorithms or computer models using data. The goal is to use these “trained” compuer models to make decisions. Unlike traditional programming, where we write explicit rules for every situation, ML models learn patterns from data to perform tasks.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"EQOKnB5CpQ"}],"key":"oj591V1Nqr"}],"key":"AlNM8pG0p5"},{"type":"block","kind":"notebook-content","children":[{"type":"admonition","kind":"warning","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Important","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"OpxfnlCpgp"}],"key":"un77iu9AT8"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Machine learning is useful when the function (","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"KvKTK6flSD"},{"type":"inlineMath","value":"f","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>","key":"zac8ZQ6GMB"},{"type":"text","value":") cannot be explicitly programmed, or when the relationship between the feature(s) and outcome is unknown.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"yBP59Y9Sa9"}],"key":"XNrGxVjL3f"}],"key":"X7HkPRbUtq"}],"key":"CvARgC4Zrd"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Data Download and Cleaning","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"tbip5s2IZz"}],"identifier":"data-download-and-cleaning","label":"Data Download and Cleaning","html_id":"data-download-and-cleaning","implicit":true,"key":"xiiRdp0Gvt"}],"key":"OfCEWjsHGP"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"To begin with this tutorial, we will download SNOTEL data using the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"B1P2FPXxSN"},{"type":"inlineCode","value":"metloom","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"wA28tno6W5"},{"type":"text","value":" package. Users that don’t have it installed can run the cell below.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"gIaryz3gWW"}],"key":"hxfNPTaXht"}],"key":"aarOBZdM8x"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"!pip install -q metloom torch torchvision torchaudio","key":"YYbjzFcl0A"},{"type":"output","id":"vML9BAu2Jla4h51b70FE0","data":[],"key":"NQZfndNw0s"}],"key":"N2XoITVhGn"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"For a more detailed explanation on ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"IxrfeSEaOo"},{"type":"inlineCode","value":"metloom","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"fqEJ0Fxe1D"},{"type":"text","value":", check out the tutorial on SNOTEL data access.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ZGTF7SVyTz"}],"key":"UW2xs9Vh9n"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"In this notebook, we will grab the following variables: SWE (","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"u7qlysAdpG"},{"type":"inlineCode","value":"SWE","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"yhzTuBta2B"},{"type":"text","value":"), average temperature (","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"sIaZ1FyC7U"},{"type":"inlineCode","value":"TEMPAVG","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Ij4OlsLYya"},{"type":"text","value":"), snow depth (","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"iRGx2QiN7v"},{"type":"inlineCode","value":"SNOWDEPTH","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"kmfZDfKWQ3"},{"type":"text","value":"), and precipitation (","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"xXdADOT3T4"},{"type":"inlineCode","value":"PRECIPITATION","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"vJPVBqwoiV"},{"type":"text","value":"). These variables will be obtained from the SNOTEL station at Green Lake, WA.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"SQSH4t43ET"}],"key":"XgDFCCVAzf"}],"key":"j1XF3js7mx"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"from datetime import datetime\nfrom metloom.pointdata import SnotelPointData\n\n# Define variables of interest\nALLOWED_VARIABLES = [\n    SnotelPointData.ALLOWED_VARIABLES.SWE,\n    SnotelPointData.ALLOWED_VARIABLES.TEMPAVG,\n    SnotelPointData.ALLOWED_VARIABLES.SNOWDEPTH,\n    SnotelPointData.ALLOWED_VARIABLES.PRECIPITATION,\n]\n\n# Define SNOTEL station\nsnotel_point = SnotelPointData(station_id=\"502:WA:SNTL\", name=\"Green Lake\")\n\n# Get daily SNOTEL data from Green Lake, WA\ndata = snotel_point.get_daily_data(\n    start_date=datetime(*(2010, 1, 1)),\n    end_date=datetime(*(2023, 1, 1)),\n    variables=ALLOWED_VARIABLES\n)\n\ndata.head()","key":"scPyHB4sg3"},{"type":"output","id":"3RQkCypvY3SyIBr1RLEaB","data":[{"output_type":"execute_result","execution_count":2,"metadata":{},"data":{"text/plain":{"content":"                                                                 geometry  \\\ndatetime                  site                                              \n2010-01-01 08:00:00+00:00 502:WA:SNTL  POINT Z (-121.17093 46.54741 5930)   \n2010-01-02 08:00:00+00:00 502:WA:SNTL  POINT Z (-121.17093 46.54741 5930)   \n2010-01-03 08:00:00+00:00 502:WA:SNTL  POINT Z (-121.17093 46.54741 5930)   \n2010-01-04 08:00:00+00:00 502:WA:SNTL  POINT Z (-121.17093 46.54741 5930)   \n2010-01-05 08:00:00+00:00 502:WA:SNTL  POINT Z (-121.17093 46.54741 5930)   \n\n                                        SWE SWE_units  AVG AIR TEMP  \\\ndatetime                  site                                        \n2010-01-01 08:00:00+00:00 502:WA:SNTL   9.2        in         32.18   \n2010-01-02 08:00:00+00:00 502:WA:SNTL   9.7        in         29.30   \n2010-01-03 08:00:00+00:00 502:WA:SNTL  10.0        in         28.94   \n2010-01-04 08:00:00+00:00 502:WA:SNTL  10.1        in         33.80   \n2010-01-05 08:00:00+00:00 502:WA:SNTL  10.8        in         36.86   \n\n                                      AVG AIR TEMP_units  SNOWDEPTH  \\\ndatetime                  site                                        \n2010-01-01 08:00:00+00:00 502:WA:SNTL               degF       34.0   \n2010-01-02 08:00:00+00:00 502:WA:SNTL               degF       37.0   \n2010-01-03 08:00:00+00:00 502:WA:SNTL               degF       38.0   \n2010-01-04 08:00:00+00:00 502:WA:SNTL               degF       38.0   \n2010-01-05 08:00:00+00:00 502:WA:SNTL               degF       38.0   \n\n                                      SNOWDEPTH_units  PRECIPITATION  \\\ndatetime                  site                                         \n2010-01-01 08:00:00+00:00 502:WA:SNTL              in            0.5   \n2010-01-02 08:00:00+00:00 502:WA:SNTL              in            0.3   \n2010-01-03 08:00:00+00:00 502:WA:SNTL              in            0.1   \n2010-01-04 08:00:00+00:00 502:WA:SNTL              in            0.7   \n2010-01-05 08:00:00+00:00 502:WA:SNTL              in            0.1   \n\n                                      PRECIPITATION_units datasource  \ndatetime                  site                                        \n2010-01-01 08:00:00+00:00 502:WA:SNTL                  in       NRCS  \n2010-01-02 08:00:00+00:00 502:WA:SNTL                  in       NRCS  \n2010-01-03 08:00:00+00:00 502:WA:SNTL                  in       NRCS  \n2010-01-04 08:00:00+00:00 502:WA:SNTL                  in       NRCS  \n2010-01-05 08:00:00+00:00 502:WA:SNTL                  in       NRCS  ","content_type":"text/plain"},"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>geometry</th>\n      <th>SWE</th>\n      <th>SWE_units</th>\n      <th>AVG AIR TEMP</th>\n      <th>AVG AIR TEMP_units</th>\n      <th>SNOWDEPTH</th>\n      <th>SNOWDEPTH_units</th>\n      <th>PRECIPITATION</th>\n      <th>PRECIPITATION_units</th>\n      <th>datasource</th>\n    </tr>\n    <tr>\n      <th>datetime</th>\n      <th>site</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2010-01-01 08:00:00+00:00</th>\n      <th>502:WA:SNTL</th>\n      <td>POINT Z (-121.17093 46.54741 5930)</td>\n      <td>9.2</td>\n      <td>in</td>\n      <td>32.18</td>\n      <td>degF</td>\n      <td>34.0</td>\n      <td>in</td>\n      <td>0.5</td>\n      <td>in</td>\n      <td>NRCS</td>\n    </tr>\n    <tr>\n      <th>2010-01-02 08:00:00+00:00</th>\n      <th>502:WA:SNTL</th>\n      <td>POINT Z (-121.17093 46.54741 5930)</td>\n      <td>9.7</td>\n      <td>in</td>\n      <td>29.30</td>\n      <td>degF</td>\n      <td>37.0</td>\n      <td>in</td>\n      <td>0.3</td>\n      <td>in</td>\n      <td>NRCS</td>\n    </tr>\n    <tr>\n      <th>2010-01-03 08:00:00+00:00</th>\n      <th>502:WA:SNTL</th>\n      <td>POINT Z (-121.17093 46.54741 5930)</td>\n      <td>10.0</td>\n      <td>in</td>\n      <td>28.94</td>\n      <td>degF</td>\n      <td>38.0</td>\n      <td>in</td>\n      <td>0.1</td>\n      <td>in</td>\n      <td>NRCS</td>\n    </tr>\n    <tr>\n      <th>2010-01-04 08:00:00+00:00</th>\n      <th>502:WA:SNTL</th>\n      <td>POINT Z (-121.17093 46.54741 5930)</td>\n      <td>10.1</td>\n      <td>in</td>\n      <td>33.80</td>\n      <td>degF</td>\n      <td>38.0</td>\n      <td>in</td>\n      <td>0.7</td>\n      <td>in</td>\n      <td>NRCS</td>\n    </tr>\n    <tr>\n      <th>2010-01-05 08:00:00+00:00</th>\n      <th>502:WA:SNTL</th>\n      <td>POINT Z (-121.17093 46.54741 5930)</td>\n      <td>10.8</td>\n      <td>in</td>\n      <td>36.86</td>\n      <td>degF</td>\n      <td>38.0</td>\n      <td>in</td>\n      <td>0.1</td>\n      <td>in</td>\n      <td>NRCS</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"}}}],"key":"E2kXYvou2l"}],"key":"s0EEIf3lhw"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Let’s take a look at the data that we just collected.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"bD7HaK95oB"}],"key":"OEInQAPjJ0"}],"key":"dDDGqgbNUq"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Reset the index of the DataFrame for plotting purposes\nfor_plotting=data.reset_index()\n\n# Define the units for each variable\nunits={\n    \"SWE\": \"in\",\n    \"SNOWDEPTH\": \"in\",\n    \"AVG AIR TEMP\": \"degF\",\n    \"PRECIPITATION\": \"in\"\n}\n\n# List the variables for plotting\nvariables_to_plot = [\n    \"SWE\", \"SNOWDEPTH\", \"AVG AIR TEMP\", \"PRECIPITATION\"\n]\n\n# Make the plot\nplt.figure(figsize=(12, 8))\n\nfor variable in variables_to_plot:\n    plt.subplot(2, 2, variables_to_plot.index(variable) + 1)\n    plt.plot(for_plotting[\"datetime\"], for_plotting[variable], label=variable)\n    plt.ylabel(f\"{variable} ({units[variable]})\", fontsize=14)\n    plt.xlabel(\"Date\", fontsize=14)\n\nplt.tight_layout()\nplt.show()","key":"hOFFx93Wg4"},{"type":"output","id":"DtbpxdzvDEsY6IqYwLlsA","data":[{"output_type":"error","traceback":"\u001b[31m---------------------------------------------------------------------------\u001b[39m\n\u001b[31mModuleNotFoundError\u001b[39m                       Traceback (most recent call last)\n\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[3]\u001b[39m\u001b[32m, line 3\u001b[39m\n\u001b[32m      1\u001b[39m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mnumpy\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mas\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mnp\u001b[39;00m\n\u001b[32m      2\u001b[39m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mpandas\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mas\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mpd\u001b[39;00m\n\u001b[32m----> \u001b[39m\u001b[32m3\u001b[39m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mmatplotlib\u001b[39;00m\u001b[34;01m.\u001b[39;00m\u001b[34;01mpyplot\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mas\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mplt\u001b[39;00m\n\u001b[32m      5\u001b[39m \u001b[38;5;66;03m# Reset the index of the DataFrame for plotting purposes\u001b[39;00m\n\u001b[32m      6\u001b[39m for_plotting=data.reset_index()\n\n\u001b[31mModuleNotFoundError\u001b[39m: No module named 'matplotlib'","ename":"ModuleNotFoundError","evalue":"No module named 'matplotlib'"}],"key":"kjph25WLeI"}],"key":"CkF4onlypa"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"We will now process this data so it’s easier to work with. First, we convert from imperial to metric units for easier interpretation. We then set the dates as the index, so that we can derive weekly rolling averages of precipitation and tempoerature.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"rke7xsnYbo"}],"key":"i9D66S2gZL"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"The dataframe is then cleaned so that only snow depth, SWE, weekly temperature, and weekly precipitation are left. The dataframe is then filtered  for any NaN values, and for any zero/unrealistic snow depth and SWE values. Finally, we derive snow density from the SWE and depth data.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"jNzGEEGYV2"}],"key":"Cn7CTMMT0d"}],"key":"pyP8LDobxt"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"clean_df=(\n    for_plotting\n    .assign(\n        swe=lambda x: x.SWE.map(lambda y: y*2.54 if y is not None else None),\n        snowdepth=lambda x: x.SNOWDEPTH.map(lambda y: y*2.54 if y is not None else None),\n        precipitation=lambda x: x.PRECIPITATION.map(lambda y: y*2.54 if y is not None else None),\n        tempavg=lambda x: x['AVG AIR TEMP'].map(lambda y: (y-32)*5/9 if y is not None else None)\n    )\n    .set_index('datetime')\n    .assign(\n        precip_7_days_avg=lambda x: x.precipitation.shift().rolling(window=\"7D\", min_periods=7).mean(),\n        tempavg_7_days_avg=lambda x: x.tempavg.shift().rolling(window=\"7D\", min_periods=7).mean(),\n    )\n    .filter([\"datetime\", \"swe\", \"snowdepth\", \"tempavg_7_days_avg\", \"precip_7_days_avg\"])\n    .dropna()\n    .query(\n        \"snowdepth != 0 and swe != 0 and \"\n        \"snowdepth > 5 and swe > 3\"\n    )\n    .assign(snowdensity=lambda x: x.swe / x.snowdepth)\n)","key":"AqjMtuQsw0"},{"type":"output","id":"B0msEzW0Q5zRARG-S2IT8","data":[],"key":"ZAFsvbttfA"}],"key":"MAEZtZRteO"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"clean_df","key":"qK25fqEsSb"},{"type":"output","id":"mP0jQ30IS3Z7dmf_JEOjf","data":[],"key":"RsOJe6WaBl"}],"key":"WG4fk0zJXH"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Building and Training a Neural Network","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"idtcmqpRvh"}],"identifier":"building-and-training-a-neural-network","label":"Building and Training a Neural Network","html_id":"building-and-training-a-neural-network","implicit":true,"key":"M6aANMDbUD"}],"key":"TMMwXenmTQ"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now that we have SNOTEL data configured in a desirable format, we can build a simple neural network using PyTorch.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"VZ7YZDhX5P"}],"key":"KI451YGE6f"}],"key":"iYaI6vY6xB"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Basic analysis libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\n# PyTorch libraries\nimport torch\nimport torch.nn as nn\nfrom torch.utils.data import Dataset\nfrom torch.utils.data import DataLoader\n\n# Find the best available computing resource\navailable_device = (\n    \"cuda\"\n    if torch.cuda.is_available()\n    else \"mps\"\n    if torch.backends.mps.is_available()\n    else \"cpu\"\n)\n\nprint(f\"Available device: {available_device}\")","key":"UqmwXQCE40"},{"type":"output","id":"_GvlE5Ab6z6JosdCP-6Da","data":[],"key":"OtJKKbicq3"}],"key":"mpGAShiXfv"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The above cell identifies the most appropriate computing resource, based on what is available. If NVIDIA GPU or Apple’s Metal Performance Shaders are available, then they are prioritized. Otherwise, the code defaults to CPU. The former options offer faster GPU support, though the CPU option is universally available.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"VjaBQ4OXNN"}],"key":"Ed40gRnFps"}],"key":"Wmnlc1mrYC"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Data Splitting","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"WMhZy8uApM"}],"identifier":"data-splitting","label":"Data Splitting","html_id":"data-splitting","implicit":true,"key":"P4r5BNXyWq"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"With our current SNOTEL data, we are going to split it into training, validation, and testing sets. A typical split is 70% training data, 15% validation data, and 15% testing data.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"XoPYDZPKWF"}],"key":"SKwY6gcDVC"}],"key":"UfRURvWznf"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Non-snow density data\nfeatures = clean_df.drop('snowdensity', axis=1).values\n\n# Snow density data only\ntargets = clean_df['snowdensity'].values\n\n# Split the data into training and temporary sets (70% training, 30% temporary)\nfeatures_train,features_temp,targets_train,targets_temp = train_test_split(features, targets, \n                                                                           test_size=0.3, random_state=0)\n\n# Further split the temp set into validation and test sets (15% each)\nfeatures_val,features_test,targets_val,targets_test = train_test_split(features_temp, targets_temp, \n                                                                       test_size=0.5, random_state=0)","key":"W6oWapRaTL"},{"type":"output","id":"LJ_wdtUKMUslHsmDoTaFG","data":[],"key":"BrtsvP3fAt"}],"key":"DmlV3gi3sw"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Here is a breakdown of the above cell:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"dIuI4t0lGx"}],"key":"flRPIqD4ds"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":2,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"We identify our “features”, or datasets that will be used to predict snow density. These include SWE, snow depth, temperature, and precipitation.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"x3GXSOGBZj"}],"key":"kVZUplaq4q"},{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"We identify our “target”, which is snow density in this example.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"sddHpJgbS6"}],"key":"drYN4ogw7D"},{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"The data is split into model training data (","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"XujGwmjzMz"},{"type":"inlineCode","value":"features_train","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"fQVnK35fUy"},{"type":"text","value":", ","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"B5EV8IutgU"},{"type":"inlineCode","value":"targets_train","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"nyQULwUR7g"},{"type":"text","value":") and validation/testing data (","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"Sy7RW8uRPH"},{"type":"inlineCode","value":"features_temp","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"nBedoTelQT"},{"type":"text","value":", ","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"B5lYUiksxv"},{"type":"inlineCode","value":"targets_temp","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"bO3tdmQ4ti"},{"type":"text","value":").","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"tVncl6ZtTv"}],"key":"bvdRx6mqox"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"The temporary data sets are further split in half to validation data (","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"v4NVpsH6p0"},{"type":"inlineCode","value":"features_val","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"arlqga0Z4x"},{"type":"text","value":", ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"a8AME6qEX5"},{"type":"inlineCode","value":"targets_val","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"MiZ28xXLwK"},{"type":"text","value":") and test data (","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"zYOs1VcBvG"},{"type":"inlineCode","value":"features_test","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"lYAVdpYopl"},{"type":"text","value":", ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"s5kR0Dr3MB"},{"type":"inlineCode","value":"targets_test","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"UZzeG2Sq9i"},{"type":"text","value":").","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"y0US9lv8yp"}],"key":"VBumI8JUXz"}],"key":"x7wfGH3n2n"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"In both splitting operations, we also set ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"o3G1lh0H5l"},{"type":"inlineCode","value":"random_state=0","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"f14T6fntJ3"},{"type":"text","value":". This means that the same training/validation/testing split occurs every time the code is run, to ensure reproducibility.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"gKo98QVTwW"}],"key":"ynuf1UM59N"}],"key":"waMXO4rFfu"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Data Scaling","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"aqgBQBCwFl"}],"identifier":"data-scaling","label":"Data Scaling","html_id":"data-scaling","implicit":true,"key":"qnvzEaZUKe"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Now that we’ve split the data, we can apply scaling. The scaler should be fit on the training data and then used to transform the training, validation, and test sets.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"z726ZAft4q"}],"key":"TIw9x3wcVg"}],"key":"ktFcMDZ0gB"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Generate scaler\nscaler = StandardScaler()\n\n# Fit scaler to training data\nscaler.fit(features_train)\n\n# Transform the training, validation, and test sets\nfeatures_train = scaler.transform(features_train)\nfeatures_val = scaler.transform(features_val)\nfeatures_test = scaler.transform(features_test)","key":"lL83QyVu51"},{"type":"output","id":"1s_T99v8WMeBI7rf8o45I","data":[],"key":"Z93dTGRvD9"}],"key":"VioBW0JTiT"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Create Dataset Classes","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Cveyw5OqqZ"}],"identifier":"create-dataset-classes","label":"Create Dataset Classes","html_id":"create-dataset-classes","implicit":true,"key":"eUGyTvY69x"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Next, we define custom ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"QLP6wW6Rom"},{"type":"inlineCode","value":"Dataset","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"BSp3T3TiaY"},{"type":"text","value":" classes for each of the three sets: training, validation, and testing.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"lFS81vbQaa"}],"key":"CcCyKEP1Gs"}],"key":"JyAm71DcOU"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Create class for available data\nclass SNOTELDataset(Dataset):\n    def __init__(self, data, targets):\n        self.data = torch.tensor(data, dtype=torch.float32)\n        self.targets = torch.tensor(targets, dtype=torch.float32).view(-1, 1)\n\n    def __len__(self):\n        return len(self.data)\n\n    def __getitem__(self, idx):\n        sample = self.data[idx]\n        target = self.targets[idx]\n        return sample, target\n\n# Create instances of the custom datasets for training, validation, and testing sets\ntrain_dataset = SNOTELDataset(data=features_train, targets=targets_train)\nval_dataset = SNOTELDataset(data=features_val, targets=targets_val)\ntest_dataset = SNOTELDataset(data=features_test, targets=targets_test)","key":"aPlV64IfGW"},{"type":"output","id":"7K4dwVe3L4oIp7Feq_Hez","data":[],"key":"quDC6GE00M"}],"key":"gLDhrj32Ey"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now, we use DataLoader to manage our data in mini-batches during training, validation, and testing.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ZR61bcLnCS"}],"key":"MWM0ZSZWJ4"}],"key":"Slt5fNhonb"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Create DataLoaders for training, validation, and testing sets\ntrain_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)\nval_loader = DataLoader(val_dataset, batch_size=32, shuffle=False)\ntest_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)","key":"HAqvHEaRfM"},{"type":"output","id":"VtgziKTdwRrrFd0lWJR2b","data":[],"key":"X6f20yjHQs"}],"key":"o6Oxu2ThJL"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Define the neural network","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"RPdF6OPiPI"}],"identifier":"define-the-neural-network","label":"Define the neural network","html_id":"define-the-neural-network","implicit":true,"key":"umEv7zjTIb"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"To set up our model, we begin by generating a simple feedforward neural network using ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"e7o54d16o0"},{"type":"inlineCode","value":"torch.nn.Module","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"MnudPtIS8q"},{"type":"text","value":".","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"zg4KQy6TUF"}],"key":"Bw3jOcyZcz"}],"key":"u5k9SJy0TL"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Define new class for neural network\nclass SNOTELNN(nn.Module):\n    def __init__(self, input_size, hidden_size, output_size):\n        super(SNOTELNN, self).__init__() # super class to inherit from nn.Module\n        # Define the layers\n        self.fc1 = nn.Linear(input_size, hidden_size)  # Fully connected layer 1\n        self.relu = nn.ReLU()  # ReLU activation function\n        self.fc2 = nn.Linear(hidden_size, output_size)  # Fully connected layer 2\n    \n    def forward(self, x): # x is the batch of input\n        # Define the forward pass\n        out = self.fc1(x)  # Pass input through first layer\n        out = self.relu(out)  # Apply ReLU activation\n        out = self.fc2(out)  # Pass through second layer to get output\n        return out\n\n# Instantiate the model and move it to the device (GPU or CPU)\nmodel = SNOTELNN(input_size=features_train.shape[1], hidden_size=128, output_size=1).to(available_device)","key":"ht5IF1SYCN"},{"type":"output","id":"J-igxBclr81ppLtZDnIhE","data":[],"key":"k7ot3hELJg"}],"key":"IXG1n9go7b"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"DMp9yjGjTd"},{"type":"inlineCode","value":"forward","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"URRdPM0ULu"},{"type":"text","value":" method defines how the input data flows through the network layers. It specifies the sequence of operations that the data undergoes as it moves from the input layer to the output layer. This method is automatically called when you pass data through the model (e.g., ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"pfrMSCET3s"},{"type":"inlineCode","value":"outputs = model(inputs)","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"uQNaGR1obE"},{"type":"text","value":").","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Ajc7Bv8ERA"}],"key":"bwF2sgqPJP"}],"key":"hsGQJDq6Vn"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"For any ML application, we need to define a loss function and an optimizer. Here, we’ll use Mean Squared Error Loss since we’re dealing with a regression problem. We’ll use the Adam optimizer, which is a good default choice due to its adaptive learning rates.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zpd3N4F6nv"}],"key":"PdNjA0hwl4"}],"key":"GGi2LFTrNO"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Loss function\ncriterion = nn.MSELoss()\n\n# Optimizer function\noptimizer = torch.optim.Adam(model.parameters(), lr=0.0001)","key":"uh3PJrtx67"},{"type":"output","id":"adcYb6KSbiXwxfA2RcDRm","data":[],"key":"OGwQlwWPea"}],"key":"yMzYdy4dTR"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Training the Neural Network","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"NSHBGocSJ5"}],"identifier":"training-the-neural-network","label":"Training the Neural Network","html_id":"training-the-neural-network","implicit":true,"key":"E61fxOIkZ5"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"We now write the training loop, which includes zeroing the gradients, performing the forward pass, computing the loss, backpropagating, and updating the model parameters. We will also validate the model on the validation set after each epoch.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"fcnS01cAJd"}],"key":"nYG9gkO0U5"}],"key":"u4ODean3ua"},{"type":"block","kind":"notebook-content","children":[{"type":"admonition","kind":"note","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Note","key":"TgMx0YNhUY"}],"key":"JkFZawoNrK"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"An ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"FHUzqK37E5"},{"type":"strong","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Epoch","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"mrZI5hyDdX"}],"key":"U90tYaAO40"},{"type":"text","value":" refers to one complete pass through the entire training dataset. During each epoch, the model sees every example in the dataset once.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"mF4v3iHvck"}],"key":"dtbtMPLWMU"}],"key":"SXyIQM0LKa"}],"key":"YksCwKsANs"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"num_epochs = 5\n\n# Lists to store the training and validation losses\ntrain_losses = []\nval_losses = []\n\nfor epoch in range(num_epochs):\n    # Training phase\n    model.train()\n    train_loss = 0.0  # Initialize cumulative training loss\n    \n    for inputs, labels in train_loader:\n        # Move data to the appropriate device\n        inputs, labels = inputs.to(available_device), labels.to(available_device)\n        \n        # Zero the gradients from the previous iteration\n        optimizer.zero_grad()\n        \n        # Perform forward pass\n        outputs = model(inputs)\n        \n        # Compute the loss\n        loss = criterion(outputs, labels)\n        \n        # Perform backward pass (compute gradients)\n        loss.backward()\n        \n        # Update the model parameters\n        optimizer.step()\n        \n        # Accumulate training loss\n        train_loss += loss.item()\n    \n    # Average training loss\n    train_loss /= len(train_loader)\n    train_losses.append(train_loss)  # Store the training loss for this epoch\n    \n    # Validation phase\n    model.eval()  # Set model to evaluation mode\n    val_loss = 0.0\n    \n    with torch.no_grad():\n        for inputs, labels in val_loader:\n            inputs, labels = inputs.to(available_device), labels.to(available_device)  # Move to device\n            outputs = model(inputs)\n            loss = criterion(outputs, labels)\n            val_loss += loss.item()\n    \n    # Average validation loss\n    val_loss /= len(val_loader)\n    val_losses.append(val_loss)  # Store the validation loss for this epoch\n    \n    print(f'Epoch [{epoch+1}/{num_epochs}], Training Loss: {train_loss:.4f}, Validation Loss: {val_loss:.4f}')","key":"EiziviVUKG"},{"type":"output","id":"uYRmGbCoQNIM9zrmjuoO-","data":[],"key":"PRF3vRNfZc"}],"key":"mk8trcgHTy"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Let’s check out the loss from both the training data and the validation data.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"JBhmUy07io"}],"key":"a7eC9q4tOL"}],"key":"oeJGwb99QZ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Plotting the training and validation losses\nplt.figure(figsize=(10, 5))\nplt.plot(range(1, num_epochs + 1), train_losses, label='Training Loss')\nplt.plot(range(1, num_epochs + 1), val_losses, label='Validation Loss')\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.title('Training and Validation Loss Over Epochs')\nplt.legend()\nplt.show()","key":"hPLN6WRZKJ"},{"type":"output","id":"IxEqgJVea5-5dZ09QEN90","data":[],"key":"A8Vqy39dLk"}],"key":"MnEH3FMoO8"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Testing the Model","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"NLDIdgP6LW"}],"identifier":"testing-the-model","label":"Testing the Model","html_id":"testing-the-model","implicit":true,"key":"wBVDec2YgR"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"We’ve done a lot of work to prepare the machine learning model for our applications. Now, it’s finally time to test it against our observations.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"vSD4vpvTPh"}],"key":"dBiawVPRXp"}],"key":"ErUCG4WNrO"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Evaluate the model on the test set and collect predictions\nmodel.eval()  # Set the model to evaluation mode\ntest_loss = 0.0  # Initialize cumulative test loss\nall_preds = []\nall_labels = []\n\nwith torch.no_grad():  # Disable gradient computation for inference\n    for inputs, labels in test_loader:\n        # Move data to the appropriate device\n        inputs, labels = inputs.to(available_device), labels.to(available_device)\n        \n        # Perform forward pass\n        outputs = model(inputs)\n        \n        # Compute the loss\n        loss = criterion(outputs, labels)\n        \n        # Accumulate test loss\n        test_loss += loss.item()\n        \n        # Store the predictions and the corresponding labels\n        all_preds.extend(outputs.cpu().numpy())\n        all_labels.extend(labels.cpu().numpy())\n\n# Calculate the average test loss\ntest_loss /= len(test_loader)\nprint(f'Test Loss: {test_loss:.4f}')\n\n# Convert lists to numpy arrays for plotting\nall_preds = np.array(all_preds)\nall_labels = np.array(all_labels)\n\n# Plot observed vs predicted\nplt.figure(figsize=(8, 8))\nplt.scatter(all_labels, all_preds, alpha=0.7)\nplt.xlabel('Observed (Actual) Values')\nplt.ylabel('Predicted Values')\nplt.title('Observed vs. Predicted Values')\nplt.grid(True)\nplt.show()","key":"ECdNM6sKww"},{"type":"output","id":"-XRnHvoCYjyfU4T9OeD5d","data":[],"key":"zgYhn5cgbZ"}],"key":"Fwe3e6k7jA"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Save the Model","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"dQnQaciOdv"}],"identifier":"save-the-model","label":"Save the Model","html_id":"save-the-model","implicit":true,"key":"b6q70jWipd"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"We now have some pretty good results for predicting snow density. Now it is essential to save our trained model, as doing so allows you to reuse the model for predictions, further training, or sharing with others without having to retrain it from scratch. In PyTorch, saving and loading models is straightforward and can be done using the ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"o7Xrra4br4"},{"type":"inlineCode","value":"torch.save","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"NXYtXSBDth"},{"type":"text","value":" and ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"KzMeYYupfY"},{"type":"inlineCode","value":"torch.load","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"JW2AQKhMUj"},{"type":"text","value":" functions.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"cmGeNKJh4N"}],"key":"JEQqf87On9"}],"key":"BNKAQ13FKc"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Save the model's state dictionary\ntorch.save(model.state_dict(), 'snotel_nn_model.pth')\n\n\n# Initialize the model architecture\nmodel = SNOTELNN(input_size=features_train.shape[1], hidden_size=128, output_size=1)\n\n# Load the model's state dictionary\nmodel.load_state_dict(torch.load('snotel_nn_model.pth', weights_only=True))\n\n# Set the model to evaluation mode before inference\nmodel.eval()","key":"ckjSP3Bdzt"},{"type":"output","id":"Up4r1bdSg8LiuBRpvLJAI","data":[],"key":"UEOyaAdhUI"}],"key":"aaitPexBUi"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Further Information","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"eKfDrZDfDH"}],"identifier":"further-information","label":"Further Information","html_id":"further-information","implicit":true,"key":"RWjmlV13Jf"},{"type":"heading","depth":4,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Hyperparameter Tuning","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"TBoaKttYfC"}],"identifier":"hyperparameter-tuning","label":"Hyperparameter Tuning","html_id":"hyperparameter-tuning","implicit":true,"key":"sWfB9IF5GG"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Hyperparameter tuning is a critical step in building machine learning models. Unlike model parameters (like weights and biases), which are learned from the data during training, hyperparameters are the settings you choose before the training process begins. These include:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"iQ5oDoLAJf"}],"key":"QjXzKv1E0o"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":5,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"strong","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Learning Rate","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"LaCE9KM2ws"}],"key":"fYlL7grwNY"},{"type":"text","value":": Controls how much to adjust the model’s weights with respect to the loss gradient.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"lQxx7N1WyP"}],"key":"Dsqg0LvrZA"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"strong","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Batch Size","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"l7E7EmV3HP"}],"key":"oeovLjGEXt"},{"type":"text","value":": Determines the number of training examples utilized in one iteration.","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"FHr9X46NO9"}],"key":"ijlytulWKI"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"strong","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Number of Hidden Layers and Neurons","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"NKxyJVnb4m"}],"key":"zZAJln4690"},{"type":"text","value":": Specifies the architecture of the neural network.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"K7A36BmuoA"}],"key":"AlEZwK8eqz"},{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"strong","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Optimizer","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"BaT3aq97BB"}],"key":"UaHtHNeJE9"},{"type":"text","value":": The algorithm used to update model weights based on the computed gradients (e.g., Adam, SGD).","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"NOYSmPsypC"}],"key":"gKwVpRWwRr"}],"key":"H4ge1SGifI"},{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Tuning these hyperparameters can significantly affect the performance of your model. However, finding the optimal set of hyperparameters can be a challenging and time-consuming process, often requiring experimentation.","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"Pjn4qtgK3f"}],"key":"RZQveFWSw8"},{"type":"heading","depth":4,"position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Manual vs. Automated Tuning","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"Wvbb5rEdCp"}],"identifier":"manual-vs-automated-tuning","label":"Manual vs. Automated Tuning","html_id":"manual-vs-automated-tuning","implicit":true,"key":"DnqtRckZyT"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":13,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":13,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"strong","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"Manual Tuning","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"lt5eH3x7Qp"}],"key":"EMs9Zf8Aph"},{"type":"text","value":": Involves adjusting hyperparameters based on intuition, experience, or trial and error. While straightforward, this approach can be inefficient and might not always yield the best results.","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"i9EMv6bo0q"}],"key":"fcHuuySVRY"}],"key":"LUvrKqbwKd"},{"type":"listItem","spread":true,"position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"strong","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Automated Tuning","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"b9srj8AQNT"}],"key":"n43s77NNAn"},{"type":"text","value":": Tools like Optuna can help automate the search for the best hyperparameters. These tools explore the hyperparameter space more systematically and can save a lot of time compared to manual tuning.","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"Me2wYDSjvf"}],"key":"T0r3Gmsxs4"}],"key":"v13nEhusjA"}],"key":"eVRa6xtQus"}],"key":"Aj5b5eBKgF"}],"key":"OoQU1uVYeu"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Terrestrial Laser Scanning","url":"/notebooks/tls-data-access","group":"Observations"},"next":{"title":"Snow Modeling","url":"/notebooks/snowmodeling-tutorial-pt1","group":"Analysis and Machine Learning"}}},"domain":"http://localhost:3000"}